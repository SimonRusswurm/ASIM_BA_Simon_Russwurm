(()=>{"use strict";var __webpack_modules__={421:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"xk\": () => (/* binding */ globalVars),\n  \"bX\": () => (/* binding */ resetAnimation),\n  \"b8\": () => (/* binding */ startAnimation)\n});\n\n;// CONCATENATED MODULE: ./src/ProgramStatus.ts\nclass ProgramStatus {\r\n    constructor() {\r\n        this.play = false;\r\n        this.pause = false;\r\n        this.reset = true;\r\n        this.singleSteps = false;\r\n        this.animationType_1 = true;\r\n        this.animationType_2 = false;\r\n        this.noAnimation = false;\r\n        this.settingsOpened = true;\r\n        this.fullscreenOn = false;\r\n        this.ioInputDisplayed = false;\r\n        this.romIsEdited = false;\r\n    }\r\n    setPlay() {\r\n        this.play = true;\r\n        this.pause = false;\r\n        this.reset = false;\r\n    }\r\n    setPause() {\r\n        this.play = false;\r\n        this.pause = true;\r\n        this.reset = false;\r\n    }\r\n    setReset() {\r\n        this.play = false;\r\n        this.pause = false;\r\n        this.reset = true;\r\n    }\r\n    setSingleSteps() {\r\n        this.singleSteps = true;\r\n    }\r\n    resetSingleSteps() {\r\n        this.singleSteps = false;\r\n    }\r\n    setNoAnimation() {\r\n        this.animationType_1 = false;\r\n        this.animationType_2 = false;\r\n        this.noAnimation = true;\r\n    }\r\n    setAnimationType_1() {\r\n        this.animationType_1 = true;\r\n        this.animationType_2 = false;\r\n        this.noAnimation = false;\r\n    }\r\n    setAnimationType_2() {\r\n        this.animationType_1 = false;\r\n        this.animationType_2 = true;\r\n        this.noAnimation = false;\r\n    }\r\n}\r\nconst programStatus = new ProgramStatus();\r\n\n;// CONCATENATED MODULE: ./src/utils.ts\n\r\n\r\nconst utils_getHtmlElement = (id) => document.getElementById(id);\r\nconst getPElement = (id) => document.getElementById(id);\r\nconst getDivElement = (id) => document.getElementById(id);\r\nconst getInputElement = (id) => document.getElementById(id);\r\nconst pauseableSleep = async (milliseconds) => {\r\n    let count = milliseconds;\r\n    while (true) {\r\n        if (count < 10) {\r\n            return true;\r\n        }\r\n        else {\r\n            await sleepFor(10);\r\n            await checkPlayPressed();\r\n            count -= 10;\r\n        }\r\n    }\r\n};\r\nconst sleepFor = (milliseconds) => new Promise(resolve => setTimeout(resolve, milliseconds));\r\nconst checkPlayPressed = async () => {\r\n    //if pause is pressed user will be caught in this loop till pressing play or reset\r\n    while (true) {\r\n        if (programStatus.play)\r\n            return true;\r\n        if (programStatus.reset)\r\n            throw Error('Reset Pressed');\r\n        console.log('waiting for user input');\r\n        await sleepFor(100);\r\n    }\r\n};\r\nconst sleepForIDLETIME = () => pauseableSleep(globalVars.IDLE_TIME);\r\nconst sleepForNOANIMATIONIDLETIME = () => pauseableSleep(globalVars.NO_ANIMATION_IDLE_TIME);\r\nconst framesPerSecond = 60;\r\nconst sleepBetweenFrames = () => pauseableSleep(1000 / framesPerSecond);\r\nconst addYellowBackgroundTo = async (htmlElement) => {\r\n    //If the sleep function throws an error the yellowBg must be removed.\r\n    try {\r\n        if (!programStatus.noAnimation) {\r\n            htmlElement.classList.add('yellowBg');\r\n            await sleepForIDLETIME();\r\n        }\r\n        else {\r\n            await sleepForNOANIMATIONIDLETIME();\r\n        }\r\n    }\r\n    finally {\r\n        htmlElement.classList.remove('yellowBg');\r\n    }\r\n};\r\n\n;// CONCATENATED MODULE: ./src/resizeWindow.ts\nconst containerMC8_div = document.getElementById('containerMC8_div');\r\nconst masterStyle_style = document.getElementById('masterStyle_style');\r\nconst sectionsCountWidth = 50;\r\nconst sectionsCountHeight = 32;\r\nconst aspectRatio = sectionsCountWidth / sectionsCountHeight;\r\nlet lastRatio_number = Math.round(window.innerWidth / window.innerHeight * 100) / 100;\r\nconst resizeWindow = (firstTimeResizing) => {\r\n    if (isWindowToResize(firstTimeResizing))\r\n        changeSizeOfApplicationContainer();\r\n    return;\r\n};\r\nconst isWindowToResize = (firstTimeResizing) => {\r\n    const iH = window.innerHeight;\r\n    const iW = window.innerWidth;\r\n    const currentRatio = Math.round(iH / iW * 100) / 100;\r\n    if (firstTimeResizing)\r\n        return true;\r\n    if (currentRatio === lastRatio_number)\r\n        return false;\r\n    if (iH < 200)\r\n        return false;\r\n    if (iW < 400)\r\n        return false;\r\n    lastRatio_number = currentRatio;\r\n    return true;\r\n};\r\nconst changeSizeOfApplicationContainer = () => {\r\n    const innerWindowHeight = window.innerHeight;\r\n    const innerWindowWidth = window.innerWidth;\r\n    if (calculateAppByWidth(innerWindowWidth, innerWindowHeight)) {\r\n        styleByWidth(innerWindowWidth);\r\n    }\r\n    else {\r\n        styleByHeight(innerWindowHeight);\r\n    }\r\n};\r\nconst calculateAppByWidth = (windowWidth, windowHeight) => windowWidth < windowHeight * aspectRatio;\r\nconst styleByWidth = (windowWidth) => {\r\n    containerMC8_div.style.width = `${windowWidth}px`;\r\n    containerMC8_div.style.height = `${windowWidth / aspectRatio}px`;\r\n    masterStyle_style.innerHTML = getFontSizeStyle(windowWidth, 1) + getBorderRadiusStyle(windowWidth, 1);\r\n};\r\nconst styleByHeight = (windowHeight) => {\r\n    containerMC8_div.style.width = `${windowHeight * aspectRatio}px`;\r\n    containerMC8_div.style.height = `${windowHeight}px`;\r\n    masterStyle_style.innerHTML = getFontSizeStyle(windowHeight, aspectRatio) + getBorderRadiusStyle(windowHeight, aspectRatio);\r\n};\r\nconst getFontSizeStyle = (widthOrHight, multiplier) => {\r\n    return `p{font-size: ${widthOrHight / 100 * 1.2 * multiplier}px;}\r\n    h1{font-size: ${widthOrHight / 100 * 1.4 * multiplier}px;}\r\n    h2{font-size: ${widthOrHight / 100 * 3 * multiplier}px; letter-spacing: ${widthOrHight / 100 * 0.037 * multiplier}px;}\r\n    h3{font-size: ${widthOrHight / 100 * 1 * multiplier}px;}\r\n    h4{font-size: ${widthOrHight / 100 * 2.5 * multiplier}px;}\r\n    .textareaFontSize{font-size: ${widthOrHight / 100 * 1.3 * multiplier}px;}\r\n    .inputFontSize{font-size: ${widthOrHight / 100 * 3 * multiplier}px;}\r\n    input.romElement{font-size: ${widthOrHight / 100 * 1.2 * multiplier}px;}`;\r\n};\r\nconst getBorderRadiusStyle = (widthOrHight, multiplier) => {\r\n    const borderRadius = widthOrHight / 100 * 0.7 * multiplier;\r\n    return `.borderBox{border-width: ${widthOrHight / 100 * 0.01 * multiplier}px;}\r\n    .rounded{ border-radius: ${borderRadius}px;}\r\n    .topLeft{border-top-left-radius: ${borderRadius}px;}\r\n    .topRight{border-top-right-radius: ${borderRadius}px;}\r\n    .bottomLeft{border-bottom-left-radius: ${borderRadius}px;}\r\n    .bottomRight{border-bottom-right-radius: ${borderRadius}px;}\r\n    .lightRounded{border-radius: ${borderRadius / 2}px;}`;\r\n};\r\n\n;// CONCATENATED MODULE: ./src/animationWindow.ts\nconst animationWindow_getHtmlElement = (id) => document.getElementById(id);\r\nclass AnimationWindow {\r\n    constructor() {\r\n        this.mc8_div = animationWindow_getHtmlElement('mc8_div');\r\n        this.sectionsCountWidth = 50;\r\n        this.sectionsCountHeight = 32;\r\n    }\r\n}\r\nconst animationWindow = new AnimationWindow();\r\n\n;// CONCATENATED MODULE: ./src/numberManipulations.ts\nconst convertHexToNumber = (hexValue) => parseInt(hexValue, 16);\r\nconst convertNumberToHex_4digits = (value) => {\r\n    let toReturn = value.toString(16);\r\n    toReturn = toReturn.toUpperCase();\r\n    const len = toReturn.length;\r\n    for (let i = 4; i > len; i--) {\r\n        toReturn = '0' + toReturn;\r\n    }\r\n    return toReturn;\r\n};\r\nconst convertNumberToHex_2digits = (value) => {\r\n    let toReturn = value.toString(16);\r\n    toReturn = toReturn.toUpperCase();\r\n    const len = toReturn.length;\r\n    for (let i = 2; i > len; i--) {\r\n        toReturn = '0' + toReturn;\r\n    }\r\n    return toReturn;\r\n};\r\nconst convertNumberTo8DigitsBinaryString = (value) => {\r\n    let toReturn = (value).toString(2);\r\n    const len = toReturn.length;\r\n    if (len != 8) {\r\n        for (let i = 0; i < 8 - len; i++) {\r\n            toReturn = '0' + toReturn;\r\n        }\r\n    }\r\n    toReturn = toReturn[0] + toReturn[1] + toReturn[2] + toReturn[3] + ' ' + toReturn[4] + toReturn[5] + toReturn[6] + toReturn[7];\r\n    return toReturn;\r\n};\r\nconst convertNumberToBinaryArray = (value) => {\r\n    const bin = convertNumberTo8DigitsBinaryString(value).replace(' ', '');\r\n    let toReturn = [];\r\n    for (let i = 0; i < bin.length; i++) {\r\n        toReturn.push(Number(bin[i]));\r\n    }\r\n    return toReturn;\r\n};\r\nconst convertBinaryToNumber = (binaryValue) => {\r\n    return Number(`0b${binaryValue}`);\r\n};\r\nconst convertNumberToComplementOnTwo = (value) => {\r\n    if (value > 127) {\r\n        value = value - 256;\r\n    }\r\n    return value;\r\n};\r\nconst checkValidHex = (hexValue) => {\r\n    const allowedChar = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\r\n    let check = true;\r\n    hexValue = hexValue.toUpperCase();\r\n    for (let i = 0; i < hexValue.length; i++) {\r\n        for (let j = 0; j < allowedChar.length; j++) {\r\n            if (hexValue[i] === allowedChar[j]) {\r\n                check = true;\r\n                break;\r\n            }\r\n            else {\r\n                check = false;\r\n            }\r\n        }\r\n        if (!check)\r\n            return false;\r\n    }\r\n    return true;\r\n};\r\nconst calculateChecksum = (intelHexFormat) => {\r\n    intelHexFormat = intelHexFormat.replace(':', '');\r\n    let sum = 0;\r\n    const recordLength = convertHexToNumber(intelHexFormat[0] + intelHexFormat[1]);\r\n    let checksumIncluded = 0;\r\n    /**\r\n     * IntelHexFormat:  :-03-0006-00-215544-3d (startCode-byteCount-Address-recordType-data-checksum)\r\n     */\r\n    if (intelHexFormat.length > 2 + 4 + 2 + recordLength * 2) {\r\n        checksumIncluded = 2;\r\n    }\r\n    for (let i = 0; i < 2 + 4 + 2 + recordLength * 2 + checksumIncluded; i = i + 2) {\r\n        sum += convertHexToNumber(intelHexFormat[i] + intelHexFormat[i + 1]);\r\n    }\r\n    sum = convertNumberToHex_4digits(sum);\r\n    sum = convertHexToNumber(sum[2] + sum[3]);\r\n    let bin_array = convertNumberToBinaryArray(Math.abs(sum));\r\n    let one_array = [0, 0, 0, 0, 0, 0, 0, 1];\r\n    let carry_array = [0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n    let sum_array = [0, 0, 0, 0, 0, 0, 0, 0];\r\n    //invert bin_array\r\n    for (let i = 0; i < bin_array.length; i++) {\r\n        if (bin_array[i] === 1) {\r\n            bin_array[i] = 0;\r\n        }\r\n        else\r\n            bin_array[i] = 1;\r\n    }\r\n    //add one to bin_array\r\n    for (let i = 8; i > 0; i--) {\r\n        if (bin_array[i - 1] + one_array[i - 1] + carry_array[i] === 1) {\r\n            carry_array[i - 1] = 0;\r\n            sum_array[i - 1] = 1;\r\n        }\r\n        else if (bin_array[i - 1] + one_array[i - 1] + carry_array[i] === 2) {\r\n            carry_array[i - 1] = 1;\r\n            sum_array[i - 1] = 0;\r\n        }\r\n        else if (bin_array[i - 1] + one_array[i - 1] + carry_array[i] === 3) {\r\n            carry_array[i - 1] = 1;\r\n            sum_array[i - 1] = 1;\r\n        }\r\n    }\r\n    sum = convertNumberToHex_2digits(convertBinaryToNumber(sum_array.join('')));\r\n    return sum;\r\n};\r\n\n;// CONCATENATED MODULE: ./src/components/RAM.ts\n\r\n\r\n\r\nclass Ram {\r\n    constructor() {\r\n        this.middleRamLabel_div = utils_getHtmlElement('middleRamLabel_div');\r\n        this.middleRamLabel_p = utils_getHtmlElement('middleRamLabel_p');\r\n        this.startAddress = 8192;\r\n        this.size = 8192;\r\n        this.firstVariableCellPosition = 112;\r\n        this.lastVariableCellPosition = 127;\r\n        this.integerCells = new Array(this.size).fill(255);\r\n        this.htmlCells = this.createRamCells();\r\n        this.appendHtmlCellsToDOM();\r\n    }\r\n    createRamCells() {\r\n        let rowCount = 0;\r\n        const cellContainer = [];\r\n        for (var i = 0; i < 240; i++) {\r\n            const ramCell = document.createElement('p');\r\n            ramCell.classList.add('square1x1', 'positionAbsolute', 'centered');\r\n            if (i < this.firstVariableCellPosition) {\r\n                ramCell.id = `ramElement${i}`;\r\n                ramCell.textContent = 'FF';\r\n            }\r\n            else if (i > this.lastVariableCellPosition) {\r\n                ramCell.id = `ramElement${i + this.size - 1 - this.firstVariableCellPosition - this.lastVariableCellPosition}`;\r\n                ramCell.textContent = 'FF';\r\n            }\r\n            else {\r\n                ramCell.id = `ramElementVariable${i - this.firstVariableCellPosition}`;\r\n                ramCell.textContent = '';\r\n            }\r\n            if (!(i % 8) && i !== 0)\r\n                rowCount++;\r\n            ramCell.style.top = `${100 / 32 * (rowCount + 2)}%`;\r\n            ramCell.style.left = `${100 / 50 * ((i % 8) + 40)}%`;\r\n            cellContainer.push(ramCell);\r\n        }\r\n        return cellContainer;\r\n    }\r\n    appendHtmlCellsToDOM() {\r\n        this.htmlCells.forEach(element => {\r\n            animationWindow.mc8_div.appendChild(element);\r\n        });\r\n    }\r\n    reset() {\r\n        this.integerCells.fill(255);\r\n        this.htmlCells.forEach((element, index) => {\r\n            element.textContent = 'FF';\r\n            if (index >= this.firstVariableCellPosition && index <= this.lastVariableCellPosition)\r\n                element.textContent = '';\r\n        });\r\n    }\r\n    reduceToRange0to2000h(address) {\r\n        return address - Math.floor(address / 8192) * 8192;\r\n    }\r\n    getValue(address) {\r\n        return this.integerCells[this.reduceToRange0to2000h(address)];\r\n    }\r\n    updateElement(address, value) {\r\n        address = this.reduceToRange0to2000h(address);\r\n        this.integerCells[address] = value;\r\n        if (address < this.firstVariableCellPosition) {\r\n            this.htmlCells[address].textContent = convertNumberToHex_2digits(value);\r\n        }\r\n        else if (address > this.size - 1 - 112) {\r\n            const htmlCellAddress = address - this.size + 1 + this.firstVariableCellPosition + this.lastVariableCellPosition;\r\n            this.htmlCells[htmlCellAddress].textContent = convertNumberToHex_2digits(value);\r\n        }\r\n        else {\r\n            this.htmlCells[address % 16 + this.firstVariableCellPosition].textContent = convertNumberToHex_2digits(value);\r\n        }\r\n    }\r\n    updateVariableCells(address) {\r\n        const reducedAddress = this.reduceToRange0to2000h(address);\r\n        if (convertNumberToHex_4digits(reducedAddress).slice(0, -1) !== this.middleRamLabel_p.textContent.slice(0, -1)) {\r\n            if (reducedAddress > 111 && reducedAddress <= 8191 - 112) {\r\n                this.changeVariableRange(address);\r\n            }\r\n            else if (this.middleRamLabel_p.textContent !== '') {\r\n                this.removeVariableCellsContent();\r\n            }\r\n        }\r\n    }\r\n    changeVariableRange(address) {\r\n        const reducedAddress = this.reduceToRange0to2000h(address);\r\n        this.middleRamLabel_div.classList.remove('ellipses');\r\n        this.middleRamLabel_div.classList.add('lightYellowBg');\r\n        this.middleRamLabel_p.textContent = convertNumberToHex_4digits(address).slice(0, -1) + 'x';\r\n        let lastXXX0Address = reducedAddress - reducedAddress % 16;\r\n        for (let i = 0; i < 16; i++) {\r\n            this.htmlCells[this.firstVariableCellPosition + i].textContent = convertNumberToHex_2digits(this.integerCells[lastXXX0Address + i]);\r\n        }\r\n    }\r\n    removeVariableCellsContent() {\r\n        this.middleRamLabel_div.classList.add('ellipses');\r\n        this.middleRamLabel_div.classList.remove('lightYellowBg');\r\n        this.middleRamLabel_p.textContent = '';\r\n        for (let i = 0; i < 16; i++) {\r\n            this.htmlCells[this.firstVariableCellPosition + i].textContent = '';\r\n        }\r\n    }\r\n    getRamElementId(address = 0) {\r\n        address = this.reduceToRange0to2000h(address);\r\n        if (address < this.firstVariableCellPosition) {\r\n            return this.htmlCells[address].id;\r\n        }\r\n        else if (address > this.size - 1 - 112) {\r\n            const htmlCellAddress = address - this.size + 1 + this.firstVariableCellPosition + this.lastVariableCellPosition;\r\n            return this.htmlCells[htmlCellAddress].id;\r\n        }\r\n        else {\r\n            return this.htmlCells[address % 16 + this.firstVariableCellPosition].id;\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/components/RegisterClasses.ts\n\r\n\r\nconst redRectangle_p = document.getElementById('redRectangle_p');\r\nconst updateRedRectangle = (PcIntegerValue) => {\r\n    if (PcIntegerValue > 8191) {\r\n        redRectangle_p.classList.add('displayNone');\r\n        return;\r\n    }\r\n    redRectangle_p.classList.remove('displayNone');\r\n    let xPos = calculateRedRectangleXPosition(PcIntegerValue);\r\n    let yPos = calculateRedRectangleYPosition(PcIntegerValue);\r\n    redRectangle_p.style.left = `${100 / 50 * xPos}%`;\r\n    redRectangle_p.style.top = `${100 / 32 * yPos}%`;\r\n};\r\nconst calculateRedRectangleXPosition = (PcIntegerValue) => PcIntegerValue % 8 + 2;\r\nconst calculateRedRectangleYPosition = (PcIntegerValue) => {\r\n    let yPos = 0;\r\n    if (PcIntegerValue < 224)\r\n        yPos = Math.floor(PcIntegerValue / 8) + 2;\r\n    else if (PcIntegerValue < 8192) {\r\n        yPos = 30;\r\n        if (PcIntegerValue % 16 > 7)\r\n            yPos += 1;\r\n    }\r\n    return yPos;\r\n};\r\nclass Register {\r\n    constructor(htmlElement) {\r\n        this.htmlElement = htmlElement;\r\n        this.value = 0;\r\n    }\r\n    update(value) {\r\n        this.value = value;\r\n        this.htmlElement.textContent = convertNumberToHex_2digits(value);\r\n    }\r\n}\r\nclass Register_x2 extends Register {\r\n    constructor(register) {\r\n        super(register);\r\n    }\r\n    update(value) {\r\n        if (value > 255)\r\n            value = value - Math.floor(value / 255) * 255 - 1;\r\n        // value = 0;\r\n        if (value < 0)\r\n            value = -Math.floor(value / 255) * 255 + 1 + value;\r\n        // value = 255;\r\n        this.value = value;\r\n        this.htmlElement.textContent = convertNumberToHex_2digits(value);\r\n    }\r\n}\r\nclass IO extends Register_x2 {\r\n    constructor(register, address, isInput) {\r\n        super(register);\r\n        this.address = address;\r\n        this.ioMapped_boolean = true;\r\n        this.isInput = isInput;\r\n    }\r\n    updateProperties(address, isIoMapped, isInput) {\r\n        this.address = address;\r\n        this.ioMapped_boolean = isIoMapped;\r\n        this.isInput = isInput;\r\n    }\r\n}\r\nclass Register_x4 extends Register {\r\n    constructor(background, hiRegister, loRegister) {\r\n        super(background);\r\n        this.hiRegister = new Register_x2(hiRegister);\r\n        this.loRegister = new Register_x2(loRegister);\r\n        this.backgroundHtmlElement = background;\r\n        this.hiValue = 0;\r\n        this.loValue = 0;\r\n    }\r\n    update(value) {\r\n        if (value > 65535)\r\n            value -= 65536;\r\n        if (value < 0)\r\n            value = 65535;\r\n        this.value = value;\r\n        this.loValue = value % 256;\r\n        this.hiValue = (value - this.loValue) / 256;\r\n        this.hiRegister.update(this.hiValue);\r\n        this.loRegister.update(this.loValue);\r\n    }\r\n    updateLoByte(value) {\r\n        this.loValue = value;\r\n        this.value = this.hiValue * 256 + this.loValue;\r\n        this.loRegister.update(this.loValue);\r\n    }\r\n    updateHiByte(value) {\r\n        this.hiValue = value;\r\n        this.value = this.hiValue * 256 + this.loValue;\r\n        this.hiRegister.update(this.hiValue);\r\n    }\r\n}\r\nclass Pc_class extends Register_x4 {\r\n    constructor(register, hiRegister, loRegister, rom, ram) {\r\n        super(register, hiRegister, loRegister);\r\n        this.ROM = rom;\r\n        this.RAM = ram;\r\n        this.update(0);\r\n    }\r\n    //override\r\n    update(value) {\r\n        if (value > 65535)\r\n            value -= 65536;\r\n        if (value < 0)\r\n            value = 65535;\r\n        this.value = value;\r\n        this.loValue = value % 256;\r\n        this.hiValue = (value - this.loValue) / 256;\r\n        this.hiRegister.update(this.hiValue);\r\n        this.loRegister.update(this.loValue);\r\n        updateRedRectangle(this.value);\r\n        this.ROM.updateVariableHtmlCells(value);\r\n        if (this.value > this.RAM.startAddress)\r\n            this.RAM.updateVariableCells(value);\r\n    }\r\n}\r\nclass Flags extends Register {\r\n    constructor() {\r\n        super(utils_getHtmlElement('flagsContainer_div'));\r\n        this.cFlag = 0;\r\n        this.zFlag = 0;\r\n        this.pFlag = 0;\r\n        this.sFlag = 0;\r\n        this.c_htmlElement = utils_getHtmlElement('cFlagValue_p');\r\n        this.z_htmlElement = utils_getHtmlElement('zFlagValue_p');\r\n        this.p_htmlElement = utils_getHtmlElement('pFlagValue_p');\r\n        this.s_htmlElement = utils_getHtmlElement('sFlagValue_p');\r\n    }\r\n    update(value) {\r\n        let binaryArray = convertNumberToBinaryArray(value);\r\n        this.cFlag = binaryArray[7];\r\n        this.zFlag = binaryArray[5];\r\n        this.pFlag = binaryArray[1];\r\n        this.sFlag = binaryArray[0];\r\n        this.updateDOM();\r\n    }\r\n    updateDec(cFlag, zFlag, pFlag, sFlag) {\r\n        this.cFlag = cFlag;\r\n        this.zFlag = zFlag;\r\n        this.pFlag = pFlag;\r\n        this.sFlag = sFlag;\r\n    }\r\n    updateDOM() {\r\n        if (this.cFlag === '-')\r\n            this.cFlag = 0;\r\n        if (this.zFlag === '-')\r\n            this.zFlag = 0;\r\n        if (this.pFlag === '-')\r\n            this.pFlag = 0;\r\n        if (this.sFlag === '-')\r\n            this.sFlag = 0;\r\n        this.value = convertBinaryToNumber([this.sFlag, this.pFlag, 0, 0, 0, this.zFlag, 0, this.cFlag].join(''));\r\n        this.c_htmlElement.textContent = this.cFlag.toString();\r\n        this.z_htmlElement.textContent = this.zFlag.toString();\r\n        this.p_htmlElement.textContent = this.pFlag.toString();\r\n        this.s_htmlElement.textContent = this.sFlag.toString();\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/components/ROM.ts\n\r\n\r\n\r\n\r\n//rom/ram variable memory blocks\r\nconst lastRomLabel_div = utils_getHtmlElement('lastRomLabel_div');\r\nconst lastRomLabel_p = utils_getHtmlElement('lastRomLabel_p');\r\nconst breakpointHover_div = utils_getHtmlElement('breakpointHover_div');\r\nconst breakpointsLabel_p = utils_getHtmlElement('breakpointsLabel_p');\r\nconst mc8_div = utils_getHtmlElement('mc8_div');\r\nconst linkerFile_textarea = utils_getHtmlElement('linkerFile_textarea');\r\nconst breakpointsCheckbox_input = utils_getHtmlElement('breakpointsCheckbox_input');\r\nlet ID_COUNTER = 0;\r\nclass HtmlCell {\r\n    constructor(allocatedIndex = -1) {\r\n        this.htmlElement = document.createElement('input');\r\n        this.allocatedIndex = allocatedIndex;\r\n    }\r\n    setImmutableCellProperties() {\r\n        this.htmlElement.value = 'FF';\r\n        this.htmlElement.readOnly = true;\r\n        this.htmlElement.maxLength = 2;\r\n        this.htmlElement.classList.add('square1x1', 'positionAbsolute', 'centered', 'romElement');\r\n        this.htmlElement.id = `romElement${ID_COUNTER}`;\r\n        ID_COUNTER++;\r\n    }\r\n    setVariableCellProperties() {\r\n        this.htmlElement.value = '';\r\n        this.htmlElement.readOnly = true;\r\n        this.htmlElement.maxLength = 2;\r\n        this.htmlElement.classList.add('square1x1', 'positionAbsolute', 'centered', 'romElement');\r\n        this.htmlElement.id = `romElementVariable${ID_COUNTER}`;\r\n        ID_COUNTER++;\r\n    }\r\n    resetImmutableCellProperties() {\r\n        this.htmlElement.value = 'FF';\r\n        this.htmlElement.readOnly = true;\r\n        this.htmlElement.classList.remove('blueText', 'breakpoint');\r\n    }\r\n    resetVariableCellProperties() {\r\n        this.htmlElement.value = '';\r\n        this.htmlElement.readOnly = true;\r\n        this.htmlElement.classList.remove('blueText', 'breakpoint');\r\n        this.allocatedIndex = -1;\r\n    }\r\n    update(value) {\r\n        this.htmlElement.value = convertNumberToHex_2digits(value);\r\n    }\r\n}\r\nclass Rom {\r\n    constructor() {\r\n        this.ID_COUNTER = 0;\r\n        this.cellCount = 8192;\r\n        this.integerCells = new Array(this.cellCount).fill(255);\r\n        this.opCommandPositions = new Array(this.cellCount).fill(false);\r\n        this.breakpointPositions = new Array(this.cellCount).fill(false);\r\n        this.immutableHtmlCellsCount = 224;\r\n        this.variableHtmlCellsCount = 16;\r\n        this.immutableHtmlCells = this.createImmutableHtmlCells();\r\n        this.variableHtmlCells = this.createVariableHtmlCells();\r\n        this.appendCellsToDOM();\r\n    }\r\n    appendCellsToDOM() {\r\n        this.immutableHtmlCells.forEach(cell => {\r\n            mc8_div.appendChild(cell.htmlElement);\r\n        });\r\n        this.variableHtmlCells.forEach(cell => {\r\n            mc8_div.appendChild(cell.htmlElement);\r\n        });\r\n    }\r\n    createImmutableHtmlCells() {\r\n        const cellContainer = [];\r\n        for (let i = 0; i < this.immutableHtmlCellsCount; i++) {\r\n            const cell = new HtmlCell(i);\r\n            cell.setImmutableCellProperties();\r\n            cell.htmlElement.style.top = `${100 / 32 * Math.floor(i / 8 + 2)}%`;\r\n            cell.htmlElement.style.left = `${100 / 50 * ((i % 8) + 2)}%`;\r\n            this.addAllListenerToHtmlCell(cell);\r\n            cellContainer.push(cell);\r\n        }\r\n        return cellContainer;\r\n    }\r\n    createVariableHtmlCells() {\r\n        const cellContainer = [];\r\n        for (let i = 0; i < this.variableHtmlCellsCount; i++) {\r\n            const cell = new HtmlCell();\r\n            cell.setVariableCellProperties();\r\n            cell.htmlElement.style.top = `${100 / 32 * Math.floor(i / 8 + 30)}%`;\r\n            cell.htmlElement.style.left = `${100 / 50 * ((i % 8) + 2)}%`;\r\n            this.addAllListenerToHtmlCell(cell);\r\n            cellContainer.push(cell);\r\n        }\r\n        return cellContainer;\r\n    }\r\n    addAllListenerToHtmlCell(cell) {\r\n        this.addDoubleClickListenerTo(cell);\r\n        this.addClickListenerTo(cell);\r\n        this.addHoverListenersTo(cell);\r\n    }\r\n    addDoubleClickListenerTo(cell) {\r\n        cell.htmlElement.addEventListener('dblclick', function () {\r\n            if (cell.allocatedIndex !== -1) {\r\n                programStatus.romIsEdited = true;\r\n                cell.htmlElement.readOnly = false;\r\n            }\r\n        });\r\n    }\r\n    addClickListenerTo(cell) {\r\n        const self = this;\r\n        cell.htmlElement.addEventListener('click', function () {\r\n            if (self.opCommandPositions[cell.allocatedIndex] && breakpointsCheckbox_input.checked) {\r\n                if (self.breakpointPositions[cell.allocatedIndex]) {\r\n                    cell.htmlElement.classList.remove('breakpoint', 'borderBox');\r\n                    self.breakpointPositions[cell.allocatedIndex] = false;\r\n                }\r\n                else {\r\n                    cell.htmlElement.classList.add('breakpoint', 'borderBox');\r\n                    self.breakpointPositions[cell.allocatedIndex] = true;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    addHoverListenersTo(cell) {\r\n        const self = this;\r\n        cell.htmlElement.addEventListener('mouseover', function () {\r\n            if (self.opCommandPositions[cell.allocatedIndex] && breakpointsCheckbox_input.checked) {\r\n                self.updateHoverInfoBoxFromIntegerCellAt(cell.allocatedIndex);\r\n                breakpointHover_div.classList.add('displayGrid');\r\n            }\r\n        });\r\n        cell.htmlElement.addEventListener('mouseleave', function () {\r\n            breakpointHover_div.classList.remove('displayGrid');\r\n        });\r\n    }\r\n    updateHoverInfoBoxFromIntegerCellAt(index) {\r\n        this.updateHoverInfoBoxPosition(index);\r\n        if (this.integerCells[index] === 221) {\r\n            this.setTwoByteIxInfoText(index);\r\n            return;\r\n        }\r\n        if (this.integerCells[index] === 203) {\r\n            this.setTwoByteShiftInfoText(index);\r\n            return;\r\n        }\r\n        for (let i = 0; i < mc8Commands.length; i++) {\r\n            if (mc8Commands[i].machineCommand === this.integerCells[index]) {\r\n                breakpointsLabel_p.textContent = mc8Commands[i].assemblerNotation;\r\n                return;\r\n            }\r\n        }\r\n        breakpointsLabel_p.textContent = 'Unbekannt';\r\n    }\r\n    updateHoverInfoBoxPosition(index) {\r\n        if (index >= this.immutableHtmlCellsCount)\r\n            breakpointHover_div.style.top = `${(100 / 32) * 27}%`;\r\n        else if (index < this.immutableHtmlCellsCount / 2)\r\n            breakpointHover_div.style.top = `${100 / 32 * Math.floor(index / 8 + 2 + 1)}%`;\r\n        else\r\n            breakpointHover_div.style.top = `${100 / 32 * Math.floor(index / 8 + 2 - 3)}%`;\r\n    }\r\n    setTwoByteIxInfoText(index) {\r\n        switch (this.integerCells[index + 1]) {\r\n            case 33:\r\n                breakpointsLabel_p.textContent = 'MOV IX, dat_16';\r\n                break;\r\n            case 34:\r\n                breakpointsLabel_p.textContent = 'MOV label, IX';\r\n                break;\r\n            case 42:\r\n                breakpointsLabel_p.textContent = 'MOV IX, label';\r\n                break;\r\n            case 35:\r\n                breakpointsLabel_p.textContent = 'INC IX';\r\n                break;\r\n            case 43:\r\n                breakpointsLabel_p.textContent = 'DEC IX';\r\n                break;\r\n            case 233:\r\n                breakpointsLabel_p.textContent = 'JP [IX]';\r\n                break;\r\n            default:\r\n                breakpointsLabel_p.textContent = 'Unbekannt';\r\n                break;\r\n        }\r\n    }\r\n    setTwoByteShiftInfoText(index) {\r\n        switch (this.integerCells[index + 1]) {\r\n            case 39:\r\n                breakpointsLabel_p.textContent = 'SHL';\r\n                break;\r\n            case 63:\r\n                breakpointsLabel_p.textContent = 'SHR';\r\n                break;\r\n            default:\r\n                breakpointsLabel_p.textContent = 'Unbekannt';\r\n                break;\r\n        }\r\n    }\r\n    loadCommandsFromLinkerFile() {\r\n        this.resetCells();\r\n        this.writeLinkerFileToIntegerCellsAndUpdateOpCommandPositions();\r\n        this.updateImmutableHtmlCellsFromIntegerCells();\r\n    }\r\n    resetCells() {\r\n        this.integerCells.fill(255);\r\n        this.opCommandPositions.fill(false);\r\n        this.breakpointPositions.fill(false);\r\n        this.resetImmutableHtmlCells();\r\n        this.resetVariableHtmlCells();\r\n    }\r\n    resetImmutableHtmlCells() {\r\n        this.immutableHtmlCells.forEach(cell => {\r\n            cell.resetImmutableCellProperties();\r\n        });\r\n    }\r\n    resetVariableHtmlCells() {\r\n        lastRomLabel_div.classList.add('ellipses');\r\n        lastRomLabel_div.classList.remove('lightYellowBg');\r\n        lastRomLabel_p.textContent = '';\r\n        this.variableHtmlCells.forEach(cell => {\r\n            cell.resetVariableCellProperties();\r\n        });\r\n    }\r\n    writeLinkerFileToIntegerCellsAndUpdateOpCommandPositions() {\r\n        let linkerString = linkerFile_textarea.value.replace(/\\r\\n|\\n|\\r/gm, '');\r\n        let dataLength = 0;\r\n        let address = 0;\r\n        //assuming the linkerFile is correct --\x3e file gets checked in settingWindow.ts\r\n        for (let i = 0; i < linkerString.length; i++) {\r\n            if (linkerString[i] === ':') {\r\n                if (linkerString[i + 8] === '1') //end of file\r\n                    break;\r\n                dataLength = Number(linkerString[i + 2]);\r\n                address = convertHexToNumber(linkerString[i + 3] + linkerString[i + 4] + linkerString[i + 5] + linkerString[i + 6]);\r\n                if (address + dataLength > this.cellCount - 1)\r\n                    return;\r\n                this.opCommandPositions[address] = true;\r\n                for (let j = 0; j < dataLength; j++) {\r\n                    this.integerCells[address + j] = convertHexToNumber(linkerString[i + 9 + j * 2] + linkerString[i + 10 + j * 2]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    updateImmutableHtmlCellsFromIntegerCells() {\r\n        for (let i = 0; i < this.immutableHtmlCells.length; i++) {\r\n            this.immutableHtmlCells[i].update(this.integerCells[i]);\r\n            if (breakpointsCheckbox_input.checked && this.opCommandPositions[i])\r\n                this.immutableHtmlCells[i].htmlElement.classList.add('blueText');\r\n        }\r\n    }\r\n    updateVariableHtmlCells(address) {\r\n        if (convertNumberToHex_4digits(address).slice(0, -1) !== lastRomLabel_p.textContent.slice(0, -1)) {\r\n            if (address >= this.immutableHtmlCellsCount && address < this.cellCount) {\r\n                this.setVariableHtmlCellsDependingOn(address);\r\n            }\r\n            else if (lastRomLabel_p.textContent !== '') {\r\n                this.resetVariableHtmlCells();\r\n            }\r\n        }\r\n    }\r\n    setVariableHtmlCellsDependingOn(address) {\r\n        const roundedAddress = address - address % 16;\r\n        lastRomLabel_div.classList.remove('ellipses');\r\n        lastRomLabel_p.textContent = convertNumberToHex_4digits(address).slice(0, -1) + 'x';\r\n        lastRomLabel_div.classList.add('lightYellowBg');\r\n        for (let i = 0; i < this.variableHtmlCells.length; i++) {\r\n            this.variableHtmlCells[i].update(this.integerCells[roundedAddress + i]);\r\n            this.variableHtmlCells[i].allocatedIndex = roundedAddress + i;\r\n            if (breakpointsCheckbox_input.checked && this.opCommandPositions[roundedAddress + i]) {\r\n                this.variableHtmlCells[i].htmlElement.classList.add('blueText');\r\n                if (this.breakpointPositions[roundedAddress + i])\r\n                    this.variableHtmlCells[i].htmlElement.classList.add('breakpoint', 'borderBox');\r\n            }\r\n            else {\r\n                this.variableHtmlCells[i].htmlElement.classList.remove('blueText');\r\n                this.variableHtmlCells[i].htmlElement.classList.remove('breakpoint', 'borderBox');\r\n            }\r\n        }\r\n    }\r\n    updateIntegerCellsFromDOM() {\r\n        for (let i = 0; i < this.immutableHtmlCells.length; i++) {\r\n            const newHexValue = this.immutableHtmlCells[i].htmlElement.value;\r\n            if (checkValidHex(newHexValue)) {\r\n                this.integerCells[i] = convertHexToNumber(newHexValue);\r\n            }\r\n            else {\r\n                this.immutableHtmlCells[i].htmlElement.value = convertNumberToHex_2digits(this.integerCells[i]);\r\n                programStatus.romIsEdited = false;\r\n            }\r\n        }\r\n        for (let i = 0; i < this.variableHtmlCells.length; i++) {\r\n            const newHexValue = this.variableHtmlCells[i].htmlElement.value;\r\n            const integerCellIndex = this.variableHtmlCells[i].allocatedIndex;\r\n            if (checkValidHex(newHexValue)) {\r\n                this.integerCells[integerCellIndex] = convertHexToNumber(newHexValue);\r\n            }\r\n            else {\r\n                this.variableHtmlCells[i].htmlElement.value = convertNumberToHex_2digits(this.integerCells[integerCellIndex]);\r\n                programStatus.romIsEdited = false;\r\n            }\r\n        }\r\n    }\r\n    getCellId(address) {\r\n        if (address >= this.immutableHtmlCellsCount) {\r\n            return this.variableHtmlCells[address % 16].htmlElement.id;\r\n        }\r\n        return this.immutableHtmlCells[address].htmlElement.id;\r\n    }\r\n    getCellValue(address) {\r\n        return this.integerCells[address];\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/components/Decoder.ts\n\r\nclass Decoder {\r\n    constructor(ram, io1, io2, io3) {\r\n        this.write = utils_getHtmlElement('wrValue_p');\r\n        this.read = utils_getHtmlElement('rdValue_p');\r\n        this.memoryRequired = utils_getHtmlElement('mValue_p');\r\n        this.ioRequest = utils_getHtmlElement('ioValue_p');\r\n        this.WR = 1;\r\n        this.RD = 1;\r\n        this.M = 1;\r\n        this.IO = 1;\r\n        this.display = utils_getHtmlElement('decDisplay_p');\r\n        this.displayedNotification = '';\r\n        this.error = false;\r\n        this.isRamAccess = false;\r\n        this.isIoAccess = false;\r\n        this.RAM = ram;\r\n        this.IO1 = io1;\r\n        this.IO2 = io2;\r\n        this.IO3 = io3;\r\n    }\r\n    update(wr, rd, m, io, address) {\r\n        this.WR = wr;\r\n        this.RD = rd;\r\n        this.M = m;\r\n        this.IO = io;\r\n        if (rd === 0 && m === 0) {\r\n            this.readFromMemory(address);\r\n        }\r\n        else if (wr === 0 && m === 0) {\r\n            this.writeToMemory(address);\r\n        }\r\n        else if (rd === 0 && io === 0) {\r\n            this.readFromIo(address);\r\n        }\r\n        else if (wr === 0 && io === 0) {\r\n            this.writeToIo(address);\r\n        }\r\n    }\r\n    readFromMemory(address) {\r\n        this.isIoAccess = false;\r\n        this.isRamAccess = false;\r\n        if (address < 8192) {\r\n            this.displayedNotification = 'Lese von ROM';\r\n        }\r\n        else if (address >= this.RAM.startAddress && address < this.RAM.startAddress + this.RAM.size) {\r\n            this.isRamAccess = true;\r\n            this.displayedNotification = 'Lese von RAM';\r\n        }\r\n        else if (address === this.IO1.address) {\r\n            this.isIoAccess = true;\r\n            if (this.IO1.isInput) {\r\n                this.displayedNotification = 'Lese von IN1';\r\n            }\r\n            else {\r\n                this.displayedNotification = 'Lese von OUT1';\r\n                this.error = true;\r\n            }\r\n        }\r\n        else if (address === this.IO2.address) {\r\n            this.isIoAccess = true;\r\n            if (this.IO2.isInput)\r\n                this.displayedNotification = 'Lese von IN2';\r\n            else {\r\n                this.displayedNotification = 'Lese von OUT2';\r\n                this.error = true;\r\n            }\r\n        }\r\n        else if (address === this.IO3.address) {\r\n            this.isIoAccess = true;\r\n            if (this.IO3.isInput)\r\n                this.displayedNotification = 'Lese von IN3';\r\n            else {\r\n                this.displayedNotification = 'Lese von OUT3';\r\n                this.error = true;\r\n            }\r\n        }\r\n        else {\r\n            this.displayedNotification = 'Lese von ???';\r\n            this.error = true;\r\n        }\r\n    }\r\n    writeToMemory(address) {\r\n        this.isIoAccess = false;\r\n        this.isRamAccess = false;\r\n        if (address < 8192) {\r\n            this.displayedNotification = 'Schreibe auf ROM';\r\n            this.error = true;\r\n        }\r\n        else if (address >= this.RAM.startAddress && address < this.RAM.startAddress + this.RAM.size) {\r\n            this.isRamAccess = true;\r\n            this.displayedNotification = 'Schreibe auf RAM';\r\n        }\r\n        else if (address === this.IO1.address) {\r\n            this.isIoAccess = true;\r\n            if (!this.IO1.isInput) {\r\n                this.displayedNotification = 'Schreibe auf OUT1';\r\n            }\r\n            else {\r\n                this.displayedNotification = 'Schreibe auf IN1';\r\n                this.error = true;\r\n            }\r\n        }\r\n        else if (address === this.IO2.address) {\r\n            this.isIoAccess = true;\r\n            if (!this.IO2.isInput) {\r\n                this.displayedNotification = 'Schreibe auf OUT2';\r\n            }\r\n            else {\r\n                this.displayedNotification = 'Schreibe auf IN2';\r\n                this.error = true;\r\n            }\r\n        }\r\n        else if (address === this.IO3.address) {\r\n            this.isIoAccess = true;\r\n            if (!this.IO3.isInput) {\r\n                this.displayedNotification = 'Schreibe auf OUT3';\r\n            }\r\n            else {\r\n                this.displayedNotification = 'Schreibe auf IN3';\r\n                this.error = true;\r\n            }\r\n        }\r\n        else {\r\n            this.displayedNotification = 'Schreibe auf ???';\r\n            this.error = true;\r\n        }\r\n    }\r\n    readFromIo(address) {\r\n        this.isIoAccess = true;\r\n        this.isRamAccess = false;\r\n        if (this.IO1.address === this.IO2.address && this.IO1.address === address) {\r\n            if (this.IO1.isInput) {\r\n                this.displayedNotification = 'Lese von IN1';\r\n            }\r\n            else {\r\n                this.displayedNotification = 'Lese von IN2';\r\n            }\r\n        }\r\n        else if (this.IO1.address === this.IO3.address && this.IO1.address === address) {\r\n            if (this.IO1.isInput) {\r\n                this.displayedNotification = 'Lese von IN1';\r\n            }\r\n            else {\r\n                this.displayedNotification = 'Lese von IN3';\r\n            }\r\n        }\r\n        else if (this.IO2.address === this.IO3.address && this.IO2.address === address) {\r\n            if (this.IO2.isInput) {\r\n                this.displayedNotification = 'Lese von IN2';\r\n            }\r\n            else {\r\n                this.displayedNotification = 'Lese von IN3';\r\n            }\r\n        }\r\n        else if (address === this.IO1.address) {\r\n            if (this.IO1.isInput) {\r\n                this.displayedNotification = 'Lese von IN1';\r\n            }\r\n            else {\r\n                this.displayedNotification = 'Lese von OUT1';\r\n                this.error = true;\r\n            }\r\n        }\r\n        else if (address === this.IO2.address) {\r\n            if (this.IO2.isInput)\r\n                this.displayedNotification = 'Lese von IN2';\r\n            else {\r\n                this.displayedNotification = 'Lese von OUT2';\r\n                this.error = true;\r\n            }\r\n        }\r\n        else if (address === this.IO3.address) {\r\n            if (this.IO3.isInput)\r\n                this.displayedNotification = 'Lese von IN3';\r\n            else {\r\n                this.displayedNotification = 'Lese von OUT3';\r\n                this.error = true;\r\n            }\r\n        }\r\n        else {\r\n            this.displayedNotification = 'Lese von ???';\r\n            this.error = true;\r\n        }\r\n    }\r\n    writeToIo(address) {\r\n        this.isIoAccess = true;\r\n        this.isRamAccess = false;\r\n        if (this.IO1.address === this.IO2.address && this.IO1.address === address) {\r\n            if (!this.IO1.isInput) {\r\n                this.displayedNotification = 'Schreibe auf OUT1';\r\n            }\r\n            else {\r\n                this.displayedNotification = 'Schreibe auf OUT2';\r\n            }\r\n        }\r\n        else if (this.IO1.address === this.IO3.address && this.IO1.address === address) {\r\n            if (!this.IO1.isInput) {\r\n                this.displayedNotification = 'Schreibe auf OUT1';\r\n            }\r\n            else {\r\n                this.displayedNotification = 'Schreibe auf OUT3';\r\n            }\r\n        }\r\n        else if (this.IO2.address === this.IO3.address && this.IO2.address === address) {\r\n            if (!this.IO2.isInput) {\r\n                this.displayedNotification = 'Schreibe auf OUT2';\r\n            }\r\n            else {\r\n                this.displayedNotification = 'Schreibe auf OUT3';\r\n            }\r\n        }\r\n        else if (address === this.IO1.address) {\r\n            if (!this.IO1.isInput) {\r\n                this.displayedNotification = 'Schreibe auf OUT1';\r\n            }\r\n            else {\r\n                this.displayedNotification = 'Schreibe auf IN1';\r\n                this.error = true;\r\n            }\r\n        }\r\n        else if (address === this.IO2.address) {\r\n            if (!this.IO2.isInput) {\r\n                this.displayedNotification = 'Schreibe auf OUT2';\r\n            }\r\n            else {\r\n                this.displayedNotification = 'Schreibe auf IN2';\r\n                this.error = true;\r\n            }\r\n        }\r\n        else if (address === this.IO3.address) {\r\n            if (!this.IO3.isInput) {\r\n                this.displayedNotification = 'Schreibe auf OUT3';\r\n            }\r\n            else {\r\n                this.displayedNotification = 'Schreibe auf IN3';\r\n                this.error = true;\r\n            }\r\n        }\r\n        else {\r\n            this.displayedNotification = 'Schreibe auf ???';\r\n            this.error = true;\r\n        }\r\n    }\r\n    updateDOM() {\r\n        this.write.textContent = String(this.WR);\r\n        this.read.textContent = String(this.RD);\r\n        this.memoryRequired.textContent = String(this.M);\r\n        this.ioRequest.textContent = String(this.IO);\r\n        this.display.textContent = this.displayedNotification;\r\n        if (this.isRamAccess || this.isIoAccess)\r\n            this.display.classList.add('yellowBg');\r\n        if (this.error) {\r\n            this.display.classList.add('redBg');\r\n            throw Error('Decoder error');\r\n        }\r\n    }\r\n    resetDOM() {\r\n        this.write.textContent = '';\r\n        this.read.textContent = '';\r\n        this.memoryRequired.textContent = '';\r\n        this.ioRequest.textContent = '';\r\n        this.display.textContent = '';\r\n        this.displayedNotification = '';\r\n        this.error = false;\r\n        this.isRamAccess = false;\r\n        this.isIoAccess = false;\r\n        this.display.classList.remove('yellowBg');\r\n        this.display.classList.remove('redBg');\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/components/ALU.ts\n\r\n\r\n\r\nclass Alu {\r\n    constructor(FLAGS_class) {\r\n        this.operandRegister1 = new Register_x2(utils_getHtmlElement('alu1RegisterValue_h2'));\r\n        this.operandRegister2 = new Register_x2(utils_getHtmlElement('alu2RegisterValue_h2'));\r\n        this.resultRegister = new Register_x2(utils_getHtmlElement('aluOutRegisterValue_h2'));\r\n        this.incBinary = (value) => {\r\n            const result = this.addBinary(value, 1, false);\r\n            this.FLAGS.cFlag = '-';\r\n            return result;\r\n        };\r\n        this.FLAGS = FLAGS_class;\r\n    }\r\n    ;\r\n    setFlags(resultValue, binaryResult, carryArray, cFlag, zFlag, setP, vFlag, sFlag) {\r\n        //carry flag\r\n        if (cFlag) {\r\n            this.FLAGS.cFlag = carryArray[0];\r\n        }\r\n        else {\r\n            this.FLAGS.cFlag = '-';\r\n        }\r\n        //zero flag\r\n        if (zFlag) {\r\n            if (resultValue === 0)\r\n                this.FLAGS.zFlag = 1;\r\n            else\r\n                this.FLAGS.zFlag = 0;\r\n        }\r\n        else {\r\n            this.FLAGS.zFlag = '-';\r\n        }\r\n        //sing flag\r\n        if (sFlag) {\r\n            this.FLAGS.sFlag = binaryResult[0];\r\n        }\r\n        else {\r\n            this.FLAGS.sFlag = '-';\r\n        }\r\n        //parity flag\r\n        if (setP) {\r\n            let cnt = 0;\r\n            for (let i = 0; i < binaryResult.length; i++) {\r\n                if (binaryResult[i])\r\n                    cnt += 1;\r\n            }\r\n            if (cnt % 2 === 0)\r\n                this.FLAGS.pFlag = 1;\r\n            else\r\n                this.FLAGS.pFlag = 0;\r\n        }\r\n        //overflow flag\r\n        else if (vFlag) {\r\n            if ((carryArray[0] === 1 && carryArray[1] === 0) || (carryArray[0] === 0 && carryArray[1] === 1))\r\n                this.FLAGS.pFlag = 1;\r\n            else\r\n                this.FLAGS.pFlag = 0;\r\n        }\r\n        else {\r\n            this.FLAGS.pFlag = '-';\r\n        }\r\n    }\r\n    invertBinaryArray(binaryArray) {\r\n        for (let i = 0; i < binaryArray.length; i++) {\r\n            if (binaryArray[i] === 0)\r\n                binaryArray[i] = 1;\r\n            else\r\n                binaryArray[i] = 0;\r\n        }\r\n        return binaryArray;\r\n    }\r\n    addThreeBinaryNumbers(number1, number2, number3) {\r\n        const sum = number1 + number2 + number3;\r\n        if (sum === 0)\r\n            return [0, 0];\r\n        if (sum === 1)\r\n            return [1, 0];\r\n        if (sum === 2)\r\n            return [0, 1];\r\n        if (sum === 3)\r\n            return [1, 1];\r\n        throw Error('NoBinaryNumbers');\r\n    }\r\n    addBinary(firstSummand, secondSummand, isReplacementAddition) {\r\n        let firstSummandBinaryArray = convertNumberToBinaryArray(firstSummand);\r\n        let secondSummandBinaryArray = convertNumberToBinaryArray(secondSummand);\r\n        let carryBinaryArray = [0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        let sumBinaryArray = [0, 0, 0, 0, 0, 0, 0, 0];\r\n        let sum = 0;\r\n        if (isReplacementAddition) {\r\n            carryBinaryArray[8] = 1;\r\n            secondSummandBinaryArray = this.invertBinaryArray(secondSummandBinaryArray);\r\n        }\r\n        for (let i = 8; i > 0; i--) {\r\n            let result = this.addThreeBinaryNumbers(firstSummandBinaryArray[i - 1], secondSummandBinaryArray[i - 1], carryBinaryArray[i]);\r\n            sumBinaryArray[i - 1] = result[0];\r\n            carryBinaryArray[i - 1] = result[1];\r\n        }\r\n        sum = convertBinaryToNumber(sumBinaryArray.join(''));\r\n        this.setFlags(sum, sumBinaryArray, carryBinaryArray, 1, 1, 0, 1, 1);\r\n        if (isReplacementAddition) {\r\n            if (this.FLAGS.cFlag)\r\n                this.FLAGS.cFlag = 0;\r\n            else\r\n                this.FLAGS.cFlag = 1;\r\n        }\r\n        return sum;\r\n    }\r\n    decBinary(value) {\r\n        const result = this.addBinary(value, 1, true);\r\n        this.FLAGS.cFlag = '-';\r\n        return result;\r\n    }\r\n    andBinary(value1, value2) {\r\n        let value1_bin = convertNumberToBinaryArray(value1);\r\n        let value2_bin = convertNumberToBinaryArray(value2);\r\n        let result_bin = [0, 0, 0, 0, 0, 0, 0, 0];\r\n        let result = 0;\r\n        for (let i = 8; i > 0; i--) {\r\n            if (value1_bin[i - 1] && value2_bin[i - 1]) {\r\n                result_bin[i - 1] = 1;\r\n            }\r\n        }\r\n        result = convertBinaryToNumber(result_bin.join(''));\r\n        this.setFlags(result, result_bin, [0], 1, 1, 1, 0, 1);\r\n        return result;\r\n    }\r\n    orBinary(value1, value2) {\r\n        let value1_bin = convertNumberToBinaryArray(value1);\r\n        let value2_bin = convertNumberToBinaryArray(value2);\r\n        let result_bin = [0, 0, 0, 0, 0, 0, 0, 0];\r\n        let result = 0;\r\n        for (let i = 8; i > 0; i--) {\r\n            if (value1_bin[i - 1] || value2_bin[i - 1]) {\r\n                result_bin[i - 1] = 1;\r\n            }\r\n        }\r\n        result = convertBinaryToNumber(result_bin.join(''));\r\n        this.setFlags(result, result_bin, [0], 1, 1, 1, 0, 1);\r\n        return result;\r\n    }\r\n    xorBinary(value1, value2) {\r\n        let value1_bin = convertNumberToBinaryArray(value1);\r\n        let value2_bin = convertNumberToBinaryArray(value2);\r\n        let result_bin = [0, 0, 0, 0, 0, 0, 0, 0];\r\n        let result = 0;\r\n        for (let i = 8; i > 0; i--) {\r\n            if (value1_bin[i - 1] ^ value2_bin[i - 1]) {\r\n                result_bin[i - 1] = 1;\r\n            }\r\n        }\r\n        result = convertBinaryToNumber(result_bin.join(''));\r\n        this.setFlags(result, result_bin, [0], 1, 1, 1, 0, 1);\r\n        return result;\r\n    }\r\n    shlBinary(value) {\r\n        let value_bin = convertNumberToBinaryArray(value);\r\n        let result = 0;\r\n        let firstBit = value_bin[0];\r\n        for (let i = 0; i < value_bin.length - 1; i++) {\r\n            value_bin[i] = value_bin[i + 1];\r\n        }\r\n        value_bin[7] = 0;\r\n        result = convertBinaryToNumber(value_bin.join(''));\r\n        this.setFlags(result, value_bin, [firstBit], 1, 1, 1, 0, 1);\r\n        return result;\r\n    }\r\n    shrBinary(value) {\r\n        let value_bin = convertNumberToBinaryArray(value);\r\n        let result = 0;\r\n        let lastBit = value_bin[7];\r\n        for (let i = 7; i > 0; i--) {\r\n            value_bin[i] = value_bin[i - 1];\r\n        }\r\n        value_bin[0] = 0;\r\n        result = convertBinaryToNumber(value_bin.join(''));\r\n        this.setFlags(result, value_bin, [lastBit], 1, 1, 1, 0, 1);\r\n        return result;\r\n    }\r\n    rclBinary(value) {\r\n        let value_bin = convertNumberToBinaryArray(value);\r\n        let result = 0;\r\n        //save bit position 7 for setFlags ( [7,6,5,4,3,2,1,0])\r\n        let carry = value_bin[0];\r\n        //shift all bits left\r\n        for (let i = 0; i < value_bin.length - 1; i++) {\r\n            value_bin[i] = value_bin[i + 1];\r\n        }\r\n        //write carry-flag in bit position 0 \r\n        value_bin[7] = this.FLAGS.cFlag;\r\n        result = convertBinaryToNumber(value_bin.join(''));\r\n        //set flags\r\n        this.setFlags(result, value_bin, [carry], 1, 0, 0, 0, 0);\r\n        return result;\r\n    }\r\n    rolBinary(value) {\r\n        let value_bin = convertNumberToBinaryArray(value);\r\n        let result = 0;\r\n        //save bit position 7 for setFlags [7,6,5,4,3,2,1,0]\r\n        //                                  ^\r\n        let carry = value_bin[0];\r\n        //shift all bits left\r\n        for (let i = 0; i < value_bin.length - 1; i++) {\r\n            value_bin[i] = value_bin[i + 1];\r\n        }\r\n        //write former bit 7 in bit position 0 \r\n        value_bin[7] = carry;\r\n        result = convertBinaryToNumber(value_bin.join(''));\r\n        this.setFlags(result, value_bin, [carry], 1, 0, 0, 0, 0);\r\n        return result;\r\n    }\r\n    rcrBinary(value) {\r\n        let value_bin = convertNumberToBinaryArray(value);\r\n        let result = 0;\r\n        //save bit position 0 for setFlags ([7,6,5,4,3,2,1,0])\r\n        let carry = value_bin[7];\r\n        for (let i = 7; i > 0; i--) {\r\n            value_bin[i] = value_bin[i - 1];\r\n        }\r\n        //write carry-flag into bit 7\r\n        value_bin[0] = this.FLAGS.cFlag;\r\n        result = convertBinaryToNumber(value_bin.join(''));\r\n        this.setFlags(result, value_bin, [carry], 1, 0, 0, 0, 0);\r\n        return result;\r\n    }\r\n    rorBinary(value) {\r\n        let value_bin = convertNumberToBinaryArray(value);\r\n        let result = 0;\r\n        //save bit position 0 for setFlags ([7,6,5,4,3,2,1,0])\r\n        let carry = value_bin[7];\r\n        for (let i = 7; i > 0; i--) {\r\n            value_bin[i] = value_bin[i - 1];\r\n        }\r\n        //write former bit 0 into bit 7\r\n        value_bin[0] = carry;\r\n        result = convertBinaryToNumber(value_bin.join(''));\r\n        this.setFlags(result, value_bin, [carry], 1, 0, 0, 0, 0);\r\n        return result;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/components/controlUnit.ts\n\r\n\r\n\r\nclass ControlUnit {\r\n    constructor() {\r\n        this.IR = new Register_x2(utils_getHtmlElement('irRegisterValue_h2'));\r\n        this.assemblerCommand = utils_getHtmlElement('assemblerCommand_p');\r\n        this.stepNumber = utils_getHtmlElement('stepNumber_p');\r\n        this.stepNumberBackground = utils_getHtmlElement('stepNumberBg_div');\r\n        this.stepDescription = utils_getHtmlElement('stepDescription_p');\r\n    }\r\n    updateStepDescription(description) {\r\n        this.stepDescription.textContent = description;\r\n    }\r\n    increaseStepNumber() {\r\n        this.stepNumber.textContent = `${Number(this.stepNumber.textContent) + 1}`;\r\n    }\r\n    updateAssemblerCommand() {\r\n        for (let i = 0; i < mc8Commands.length; i++) {\r\n            if (mc8Commands[i].machineCommand === this.IR.value) {\r\n                this.assemblerCommand.textContent = mc8Commands[i].assemblerNotation;\r\n                return;\r\n            }\r\n        }\r\n        this.assemblerCommand.textContent = 'Befehl unbekannt';\r\n        throw Error('Unknown command');\r\n    }\r\n    reset() {\r\n        this.IR.update(0);\r\n        this.stepNumber.textContent = '0';\r\n        this.stepDescription.textContent = 'Prozessor angehalten';\r\n        this.assemblerCommand.textContent = '';\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/components/Mc8Components.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Mc8Components {\r\n    constructor() {\r\n        this.ROM = new Rom();\r\n        this.RAM = new Ram();\r\n        this.IO1 = new IO(utils_getHtmlElement('io1RegisterValue_h2'), 0, true);\r\n        this.IO2 = new IO(utils_getHtmlElement('io2RegisterValue_h2'), 1, false);\r\n        this.IO3 = new IO(utils_getHtmlElement('io3RegisterValue_h2'), 2, true);\r\n        this.FLAGS = new Flags();\r\n        this.ALU = new Alu(this.FLAGS);\r\n        this.CONTROL_UNIT = new ControlUnit();\r\n        this.A = new Register_x2(utils_getHtmlElement('aRegisterValue_h2'));\r\n        this.B = new Register_x2(utils_getHtmlElement('bRegisterValue_h2'));\r\n        this.C = new Register_x2(utils_getHtmlElement('cRegisterValue_h2'));\r\n        this.HL = new Register_x4(utils_getHtmlElement('hlBackground_div'), utils_getHtmlElement('hlRegisterValueHi_h2'), utils_getHtmlElement('hlRegisterValueLo_h2'));\r\n        this.IX = new Register_x4(utils_getHtmlElement('ixBackground_div'), utils_getHtmlElement('ixRegisterValueHi_h2'), utils_getHtmlElement('ixRegisterValueLo_h2'));\r\n        this.SP = new Register_x4(utils_getHtmlElement('spBackground_div'), utils_getHtmlElement('spRegisterValueHi_h2'), utils_getHtmlElement('spRegisterValueLo_h2'));\r\n        this.ZR = new Register_x4(utils_getHtmlElement('zrBackground_div'), utils_getHtmlElement('zrRegisterValueHi_h2'), utils_getHtmlElement('zrRegisterValueLo_h2'));\r\n        this.PC = new Pc_class(utils_getHtmlElement('pcBackground_div'), utils_getHtmlElement('pcRegisterValueHi_h2'), utils_getHtmlElement('pcRegisterValueLo_h2'), this.ROM, this.RAM);\r\n        this.DECODER = new Decoder(this.RAM, this.IO1, this.IO2, this.IO3);\r\n    }\r\n    getRegisterByName(registerName) {\r\n        registerName = registerName.replace('_lo', '').replace('_hi', '');\r\n        switch (registerName) {\r\n            case 'IO1':\r\n                return this.IO1;\r\n            case 'IO2':\r\n                return this.IO2;\r\n            case 'IO3':\r\n                return this.IO3;\r\n            case 'A':\r\n                return this.A;\r\n            case 'B':\r\n                return this.B;\r\n            case 'C':\r\n                return this.C;\r\n            case 'IR':\r\n                return this.CONTROL_UNIT.IR;\r\n            case 'ALU1':\r\n                return this.ALU.operandRegister1;\r\n            case 'ALU2':\r\n                return this.ALU.operandRegister2;\r\n            case 'ALUOUT':\r\n                return this.ALU.resultRegister;\r\n            case 'HL':\r\n                return this.HL;\r\n            case 'IX':\r\n                return this.IX;\r\n            case 'SP':\r\n                return this.SP;\r\n            case 'PC':\r\n                return this.PC;\r\n            case 'ZR':\r\n                return this.ZR;\r\n            case 'FLAGS':\r\n                return this.FLAGS;\r\n            default:\r\n                throw new Error(`no such Register: ${registerName}`);\r\n        }\r\n    }\r\n    initComponents() {\r\n        this.IO1.update(255);\r\n        this.IO2.update(255);\r\n        this.IO3.update(255);\r\n        this.A.update(0);\r\n        this.B.update(0);\r\n        this.C.update(0);\r\n        this.HL.update(0);\r\n        this.IX.update(0);\r\n        this.SP.update(0);\r\n        this.PC.update(0);\r\n        this.ZR.update(0);\r\n        this.CONTROL_UNIT.reset();\r\n        this.FLAGS.updateDec(0, 0, 0, 0);\r\n        this.FLAGS.updateDOM();\r\n        this.DECODER.resetDOM();\r\n        this.RAM.updateVariableCells(0);\r\n        this.ALU.operandRegister1.htmlElement.textContent = '';\r\n        this.ALU.operandRegister2.htmlElement.textContent = '';\r\n        this.ALU.resultRegister.htmlElement.textContent = '';\r\n    }\r\n}\r\nconst mc8Components = new Mc8Components();\r\n\n;// CONCATENATED MODULE: ./src/busLogic.ts\n\r\nclass Point {\r\n    constructor(xPosition, yPosition) {\r\n        this.x = xPosition;\r\n        this.y = yPosition;\r\n    }\r\n}\r\nclass fixPoint extends Point {\r\n    constructor(index, parentIndex, xPosition, yPosition, label) {\r\n        super(xPosition, yPosition);\r\n        this.index = index;\r\n        this.label = label;\r\n        this.parentIndex = parentIndex;\r\n    }\r\n    getParent() {\r\n        return this.parentIndex;\r\n    }\r\n}\r\nconst fixPoints = [\r\n    new fixPoint(0, -1, 10, 2, 'ROM1'),\r\n    new fixPoint(1, 0, 16, 2, ''),\r\n    new fixPoint(2, 1, 16, 0, ''),\r\n    new fixPoint(3, 2, 18, 0, 'IO1'),\r\n    new fixPoint(4, 1, 20, 2, ''),\r\n    new fixPoint(5, 4, 24, 2, ''),\r\n    new fixPoint(6, 5, 24, 0, ''),\r\n    new fixPoint(7, 6, 26, 0, 'IO2'),\r\n    new fixPoint(8, 5, 32, 2, ''),\r\n    new fixPoint(9, 8, 32, 0, ''),\r\n    new fixPoint(10, 9, 34, 0, 'IO3'),\r\n    new fixPoint(11, 8, 38, 2, 'RAM1'),\r\n    new fixPoint(12, 4, 20, 4, ''),\r\n    new fixPoint(13, 12, 26, 4, ''),\r\n    new fixPoint(14, 13, 26, 6, 'ALU1'),\r\n    new fixPoint(15, 13, 30, 4, ''),\r\n    new fixPoint(16, 15, 30, 6, 'ALU2'),\r\n    new fixPoint(17, 15, 34, 4, ''),\r\n    new fixPoint(18, 17, 36, 4, ''),\r\n    new fixPoint(19, 18, 36, 14, ''),\r\n    new fixPoint(20, 19, 34, 14, 'IR'),\r\n    new fixPoint(21, 17, 34, 12, ''),\r\n    new fixPoint(22, 21, 28, 12, ''),\r\n    new fixPoint(23, 22, 28, 10, 'ALUOUT'),\r\n    new fixPoint(24, 12, 15, 4, ''),\r\n    new fixPoint(25, 24, 15, 6, 'A'),\r\n    new fixPoint(26, 25, 17, 6, 'FLAGS'),\r\n    new fixPoint(27, 24, 12, 4, ''),\r\n    new fixPoint(28, 27, 12, 15, ''),\r\n    new fixPoint(29, 28, 16, 15, ''),\r\n    new fixPoint(30, 29, 16, 14, 'IX_hi'),\r\n    new fixPoint(31, 30, 16, 12, 'HL_hi'),\r\n    new fixPoint(32, 31, 16, 10, 'B'),\r\n    new fixPoint(33, 32, 18, 10, 'C'),\r\n    new fixPoint(34, 29, 16, 16, 'SP_hi'),\r\n    new fixPoint(35, 34, 16, 18, 'PC_hi'),\r\n    new fixPoint(36, 35, 16, 20, 'ZR_hi'),\r\n    new fixPoint(37, 29, 18, 15, ''),\r\n    new fixPoint(38, 37, 18, 14, 'IX_lo'),\r\n    new fixPoint(39, 38, 18, 12, 'HL_lo'),\r\n    new fixPoint(40, 37, 18, 16, 'SP_lo'),\r\n    new fixPoint(41, 40, 18, 18, 'PC_lo'),\r\n    new fixPoint(42, 41, 18, 20, 'ZR_lo'),\r\n    new fixPoint(43, 29, 16, 14, 'IX'),\r\n    new fixPoint(44, 43, 16, 12, 'HL'),\r\n    new fixPoint(45, 29, 16, 16, 'SP'),\r\n    new fixPoint(46, 45, 16, 18, 'PC'),\r\n    new fixPoint(47, 46, 16, 20, 'ZR'),\r\n    new fixPoint(48, 47, 16, 23, 'DEC_UPDATE'),\r\n    new fixPoint(49, 48, 16, 24, ''),\r\n    new fixPoint(50, 49, 10, 24, 'ROM2'),\r\n    new fixPoint(51, 49, 36, 24, 'RAM2'),\r\n];\r\nconst getPointIndex = (pointLabel) => {\r\n    for (let i = 0; i < fixPoints.length; i++) {\r\n        if (fixPoints[i].label === pointLabel)\r\n            return i;\r\n    }\r\n    return -1;\r\n};\r\nconst getIndexArrayZeroToPoint = (pointIndex) => {\r\n    let arrayAtoZero = [];\r\n    while (true) {\r\n        if (pointIndex === 0) {\r\n            arrayAtoZero.push(0);\r\n            return arrayAtoZero.reverse();\r\n        }\r\n        else {\r\n            arrayAtoZero.push(pointIndex);\r\n            pointIndex = fixPoints[pointIndex].getParent();\r\n        }\r\n    }\r\n};\r\nconst getIndexArrayAtoB = (arrayZeroToA, arrayZeroToB) => {\r\n    const arrayAtoB = [];\r\n    const highestCommonIndex = getHighestCommonIndex(arrayZeroToA, arrayZeroToB);\r\n    let aToZero_array = arrayZeroToA.reverse();\r\n    for (let i = 0; i < aToZero_array.length; i++) {\r\n        if (aToZero_array[i] > highestCommonIndex)\r\n            arrayAtoB.push(aToZero_array[i]);\r\n    }\r\n    for (let i = 0; i < arrayZeroToB.length; i++) {\r\n        if (arrayZeroToB[i] >= highestCommonIndex)\r\n            arrayAtoB.push(arrayZeroToB[i]);\r\n    }\r\n    return arrayAtoB;\r\n};\r\nconst getHighestCommonIndex = (arrayZeroToA, arrayZeroToB) => {\r\n    const smallestLength = (arrayZeroToA < arrayZeroToB ? arrayZeroToA.length : arrayZeroToB.length);\r\n    let highestCommonIndex = 0;\r\n    for (let i = 0; i < smallestLength; i++) {\r\n        if (arrayZeroToA[i] === arrayZeroToB[i]) {\r\n            highestCommonIndex = arrayZeroToA[i];\r\n        }\r\n    }\r\n    return highestCommonIndex;\r\n};\r\nconst romElementToROM1 = (romElementID) => {\r\n    let toROM1 = [];\r\n    let romElement = utils_getHtmlElement(romElementID);\r\n    let rEx = romElement.style.left.replace('%', '');\r\n    let rEy = romElement.style.top.replace('%', '');\r\n    rEx = Math.round(Number(rEx) * 50 / 100);\r\n    rEy = Math.round(Number(rEy) * 32 / 100);\r\n    let romIntermediatePoint = new fixPoint(-1, 0, rEx, 2, '');\r\n    let romPoint = new fixPoint(-1, 0, rEx, rEy, '');\r\n    toROM1.push(romPoint);\r\n    toROM1.push(romIntermediatePoint);\r\n    return toROM1;\r\n};\r\nconst ramElementToRAM1 = (ramElementID) => {\r\n    let toRAM1 = [];\r\n    let ramElement = utils_getHtmlElement(ramElementID);\r\n    let rEx = ramElement.style.left.replace('%', '');\r\n    let rEy = ramElement.style.top.replace('%', '');\r\n    rEx = Math.round(Number(rEx) * 50 / 100);\r\n    rEy = Math.round(Number(rEy) * 32 / 100);\r\n    let ramIntermediatePoint = new fixPoint(-1, 0, rEx, 2, '');\r\n    let romPoint = new fixPoint(-1, 0, rEx, rEy, '');\r\n    toRAM1.push(romPoint);\r\n    toRAM1.push(ramIntermediatePoint);\r\n    return toRAM1;\r\n};\r\nconst RAM2ToRamElement = (ramElementID_string) => {\r\n    let toRamElement = [];\r\n    const ramElement = utils_getHtmlElement(ramElementID_string);\r\n    let rEx = ramElement.style.left.replace('%', '');\r\n    let rEy = ramElement.style.top.replace('%', '');\r\n    rEx = Math.round(Number(rEx) * 50 / 100);\r\n    rEy = Math.round(Number(rEy) * 32 / 100);\r\n    let ramBetweenPoint = new fixPoint(-1, 0, rEx, 2, '');\r\n    let ramPoint = new fixPoint(-1, 0, rEx, rEy, '');\r\n    toRamElement.push(ramBetweenPoint);\r\n    toRamElement.push(ramPoint);\r\n    return toRamElement;\r\n};\r\n//returns the fixPoints to pass during the movement\r\nconst getFixPointsAtoB = (fixPointLabelA, fixPointLabelB) => {\r\n    let pointsAtoB = [];\r\n    let indexBuffer;\r\n    if (fixPointLabelA.includes('romElement')) {\r\n        pointsAtoB = getFixPointsAtoB('ROM1', fixPointLabelB);\r\n        pointsAtoB = romElementToROM1(fixPointLabelA).concat(pointsAtoB);\r\n        return pointsAtoB;\r\n    }\r\n    if (fixPointLabelA.includes('ramElement')) {\r\n        pointsAtoB = getFixPointsAtoB('RAM1', fixPointLabelB);\r\n        pointsAtoB = ramElementToRAM1(fixPointLabelA).concat(pointsAtoB);\r\n        return pointsAtoB;\r\n    }\r\n    if (fixPointLabelB.includes('ramElement')) {\r\n        pointsAtoB = getFixPointsAtoB(fixPointLabelA, 'RAM1');\r\n        pointsAtoB = pointsAtoB.concat(RAM2ToRamElement(fixPointLabelB));\r\n        return pointsAtoB;\r\n    }\r\n    indexBuffer = getIndexArrayAtoB(getIndexArrayZeroToPoint(getPointIndex(fixPointLabelA)), getIndexArrayZeroToPoint(getPointIndex(fixPointLabelB)));\r\n    for (let i = 0; i < indexBuffer.length; i++) {\r\n        pointsAtoB.push(fixPoints[indexBuffer[i]]);\r\n    }\r\n    return pointsAtoB;\r\n};\r\n//calculates the coordinates between the fixPoints.\r\n//At Speed 1, the movingObject updates every single coordinate\r\n//At Speed 2, the movingObject updates every second coordinate...\r\n//max Speed = 12 (update only fixPoints)\r\nconst calcIntermediatePositions = (pointsAtoB, interPointsQuantity = 12) => {\r\n    let xPositions = [];\r\n    let yPositions = [];\r\n    let finalXCoordinates = [];\r\n    let finalYCoordinates = [];\r\n    let posDiff = 0;\r\n    const reciprocal = 1 / interPointsQuantity;\r\n    for (let j = 0; j < pointsAtoB.length - 1; j++) {\r\n        if (pointsAtoB[j].y !== pointsAtoB[j + 1].y) {\r\n            posDiff = Math.abs((pointsAtoB[j + 1].y - pointsAtoB[j].y));\r\n            for (let i = 0; i < interPointsQuantity * posDiff; i++) {\r\n                if ((pointsAtoB[j + 1].y > pointsAtoB[j].y))\r\n                    yPositions.push(pointsAtoB[j].y + reciprocal * (i + 1));\r\n                else\r\n                    yPositions.push(pointsAtoB[j].y - reciprocal * (i + 1));\r\n                xPositions.push(pointsAtoB[j].x);\r\n            }\r\n        }\r\n        if (pointsAtoB[j].x !== pointsAtoB[j + 1].x) {\r\n            posDiff = Math.abs((pointsAtoB[j + 1].x - pointsAtoB[j].x));\r\n            for (let i = 0; i < interPointsQuantity * posDiff; i++) {\r\n                if ((pointsAtoB[j + 1].x > pointsAtoB[j].x))\r\n                    xPositions.push(pointsAtoB[j].x + reciprocal * (i + 1));\r\n                else\r\n                    xPositions.push(pointsAtoB[j].x - reciprocal * (i + 1));\r\n                yPositions.push(pointsAtoB[j].y);\r\n            }\r\n        }\r\n    }\r\n    //create 2-dimensional array, which contains 12 coordinates per index\r\n    for (let i = 0, k = -1; i < xPositions.length; i++) {\r\n        if (i % interPointsQuantity === 0) {\r\n            k++;\r\n            finalXCoordinates[k] = [];\r\n            finalYCoordinates[k] = [];\r\n        }\r\n        finalXCoordinates[k].push(xPositions[i]);\r\n        finalYCoordinates[k].push(yPositions[i]);\r\n    }\r\n    return [finalXCoordinates, finalYCoordinates];\r\n};\r\nconst getPointsAtoB = (fixPointLabelA, fixPointLabelB) => {\r\n    const fixPoints = getFixPointsAtoB(fixPointLabelA, fixPointLabelB);\r\n    let points = [];\r\n    for (let i = 0; i < fixPoints.length - 1; i++) {\r\n        points = points.concat(intermediatePositions(fixPoints[i], fixPoints[i + 1]));\r\n    }\r\n    points = points.concat(fixPoints[fixPoints.length - 1]);\r\n    return points;\r\n};\r\nconst intermediatePositions = (pointA, pointB, interPointsQuantity = 12) => {\r\n    const points = [];\r\n    let pathDifference = 0;\r\n    let newCoordinate = 0;\r\n    const reciprocalQuantity = 1 / interPointsQuantity;\r\n    points.push(pointA);\r\n    if (pointA.x !== pointB.x) {\r\n        pathDifference = pointB.x - pointA.x;\r\n        for (let i = 1; i < interPointsQuantity * Math.abs(pathDifference); i++) {\r\n            if (pathDifference > 0)\r\n                newCoordinate = pointA.x + reciprocalQuantity * (i);\r\n            else\r\n                newCoordinate = pointA.x - reciprocalQuantity * (i);\r\n            points.push(new Point(newCoordinate, pointA.y));\r\n        }\r\n    }\r\n    else {\r\n        pathDifference = pointB.y - pointA.y;\r\n        for (let i = 1; i < interPointsQuantity * Math.abs(pathDifference); i++) {\r\n            if (pathDifference > 0)\r\n                newCoordinate = pointA.y + reciprocalQuantity * (i);\r\n            else\r\n                newCoordinate = pointA.y - reciprocalQuantity * (i);\r\n            points.push(new Point(pointA.x, newCoordinate));\r\n        }\r\n    }\r\n    return points;\r\n};\r\n\n;// CONCATENATED MODULE: ./src/animators/ArrowAnimator.ts\n\r\n\r\n\r\nconst ArrowAnimator_getHtmlElement = (id) => document.getElementById(id);\r\nconst registerArrow_div = ArrowAnimator_getHtmlElement('registerArrow_div');\r\nconst irArrow_div = ArrowAnimator_getHtmlElement('irArrow_div');\r\nconst movingFlagsArrow_div = ArrowAnimator_getHtmlElement('movingFlagsArrow_div');\r\nconst cFlagArrow_div = ArrowAnimator_getHtmlElement('cFlagArrow_div');\r\nconst checkJumpArrow_div = ArrowAnimator_getHtmlElement('checkJumpArrow_div');\r\nclass ArrowAnimator {\r\n    constructor() { }\r\n    async displayRegisterArrow(registerName) {\r\n        const cssClassName = this.getCssClassNameOfArrowBy(registerName);\r\n        if (!programStatus.noAnimation) {\r\n            registerArrow_div.classList.add(cssClassName);\r\n            try {\r\n                await sleepForIDLETIME();\r\n            }\r\n            finally {\r\n                registerArrow_div.classList.remove(cssClassName);\r\n            }\r\n        }\r\n    }\r\n    getCssClassNameOfArrowBy(registerName) {\r\n        switch (registerName) {\r\n            case 'PC':\r\n                return 'PC_arrow';\r\n            case 'ZR':\r\n                return 'ZR_arrow';\r\n            case 'HL':\r\n                return 'HL_arrow';\r\n            case 'IX':\r\n                return 'IX_arrow';\r\n            case 'SP':\r\n                return 'SP_arrow';\r\n            default:\r\n                return '';\r\n        }\r\n    }\r\n    async displayIrArrow() {\r\n        if (!programStatus.noAnimation) {\r\n            irArrow_div.classList.add('ir_arrow');\r\n            try {\r\n                await sleepForIDLETIME();\r\n            }\r\n            finally {\r\n                irArrow_div.classList.remove('ir_arrow');\r\n            }\r\n        }\r\n    }\r\n    async displaySetFlagsArrow() {\r\n        if (!programStatus.noAnimation) {\r\n            movingFlagsArrow_div.classList.add('flags_arrow');\r\n            try {\r\n                await sleepForIDLETIME();\r\n            }\r\n            finally {\r\n                movingFlagsArrow_div.classList.remove('flags_arrow');\r\n            }\r\n        }\r\n    }\r\n    async displayAluCarryArrow() {\r\n        if (!programStatus.noAnimation) {\r\n            cFlagArrow_div.classList.add('cFlag_arrow');\r\n            mc8Components.FLAGS.c_htmlElement.classList.add('yellowBg', 'borderBox');\r\n            try {\r\n                await sleepForIDLETIME();\r\n            }\r\n            finally {\r\n                cFlagArrow_div.classList.remove('cFlag_arrow');\r\n                mc8Components.FLAGS.c_htmlElement.classList.remove('yellowBg', 'borderBox');\r\n            }\r\n        }\r\n    }\r\n    async displayJumpArrow(flagName) {\r\n        if (!programStatus.noAnimation) {\r\n            const flagHtmlElement = this.getFlagHtmlElementBy(flagName);\r\n            checkJumpArrow_div.classList.add('jump_arrow');\r\n            flagHtmlElement.classList.add('yellowBg', 'borderBox');\r\n            try {\r\n                await sleepForIDLETIME();\r\n            }\r\n            finally {\r\n                checkJumpArrow_div.classList.remove('jump_arrow');\r\n                flagHtmlElement.classList.remove('yellowBg', 'borderBox');\r\n            }\r\n        }\r\n    }\r\n    getFlagHtmlElementBy(flagName) {\r\n        switch (flagName) {\r\n            case 'cFlag':\r\n                return mc8Components.FLAGS.c_htmlElement;\r\n            case 'zFlag':\r\n                return mc8Components.FLAGS.z_htmlElement;\r\n            case 'sFlag':\r\n                return mc8Components.FLAGS.s_htmlElement;\r\n            case 'pFlag':\r\n                return mc8Components.FLAGS.p_htmlElement;\r\n            default:\r\n                throw Error('No Such flagName');\r\n        }\r\n    }\r\n}\r\nconst arrowAnimator = new ArrowAnimator();\r\n\n;// CONCATENATED MODULE: ./src/animators/ControlUnitAnimator.ts\n\r\n\r\n\r\n\r\nclass ControlUnitAnimator {\r\n    constructor() {\r\n        this.stepNumberBackground_div = utils_getHtmlElement('stepNumberBg_div');\r\n    }\r\n    async stepDescriptionUpdate(description) {\r\n        mc8Components.CONTROL_UNIT.updateStepDescription(description);\r\n        mc8Components.CONTROL_UNIT.increaseStepNumber();\r\n        await addYellowBackgroundTo(this.stepNumberBackground_div);\r\n    }\r\n    async assemblerCommandUpdate() {\r\n        await addYellowBackgroundTo(mc8Components.CONTROL_UNIT.IR.htmlElement);\r\n        await arrowAnimator.displayIrArrow();\r\n        mc8Components.CONTROL_UNIT.updateAssemblerCommand();\r\n        if (!programStatus.noAnimation)\r\n            await sleepForIDLETIME();\r\n    }\r\n}\r\nconst controlUnitAnimator = new ControlUnitAnimator();\r\n\n;// CONCATENATED MODULE: ./src/animators/RegisterAnimator.ts\n\r\n\r\n\r\n\r\n\r\nclass RegisterAnimator {\r\n    constructor() { }\r\n    async registerUpdate(registerName, value) {\r\n        const register = mc8Components.getRegisterByName(registerName);\r\n        if (register instanceof Register_x4) {\r\n            if (registerName.includes('hi')) {\r\n                register.updateHiByte(value);\r\n                await addYellowBackgroundTo(register.hiRegister.htmlElement);\r\n            }\r\n            else if (registerName.includes('lo')) {\r\n                register.updateLoByte(value);\r\n                await addYellowBackgroundTo(register.loRegister.htmlElement);\r\n            }\r\n            else {\r\n                register.update(value);\r\n                addYellowBackgroundTo(register.hiRegister.htmlElement);\r\n                addYellowBackgroundTo(register.loRegister.htmlElement);\r\n                await addYellowBackgroundTo(register.backgroundHtmlElement);\r\n            }\r\n        }\r\n        else {\r\n            register.update(value);\r\n            await addYellowBackgroundTo(register.htmlElement);\r\n        }\r\n    }\r\n    async increasePcByOne() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Erhöhe Programmzähler um 1');\r\n        await arrowAnimator.displayRegisterArrow('PC');\r\n        await this.registerUpdate('PC', mc8Components.PC.value + 1);\r\n    }\r\n}\r\nconst registerAnimator = new RegisterAnimator();\r\n\n;// CONCATENATED MODULE: ./src/animators/IoAnimator.ts\n\r\n\r\n\r\n\r\n\r\nconst io2InputInfo_p = utils_getHtmlElement('io2InputInfo_p');\r\nconst io1InputInfo_p = utils_getHtmlElement('io1InputInfo_p');\r\nconst io3InputInfo_p = utils_getHtmlElement('io3InputInfo_p');\r\nconst io1InputWindow_div = utils_getHtmlElement('io1InputWindow_div');\r\nconst io2InputWindow_div = utils_getHtmlElement('io2InputWindow_div');\r\nconst io3InputWindow_div = utils_getHtmlElement('io3InputWindow_div');\r\nconst io1Input_input = utils_getHtmlElement('io1Input_input');\r\nconst io2Input_input = utils_getHtmlElement('io2Input_input');\r\nconst io3Input_input = utils_getHtmlElement('io3Input_input');\r\nclass IOAnimator {\r\n    constructor() { }\r\n    async animateIoUserInput(IoName) {\r\n        let ioInputWindow;\r\n        let ioInput;\r\n        let check = true;\r\n        programStatus.ioInputDisplayed = true;\r\n        switch (IoName) {\r\n            case 'IO1':\r\n                ioInputWindow = io1InputWindow_div;\r\n                ioInput = io1Input_input;\r\n                break;\r\n            case 'IO2':\r\n                ioInputWindow = io2InputWindow_div;\r\n                ioInput = io2Input_input;\r\n                break;\r\n            case 'IO3':\r\n                ioInputWindow = io3InputWindow_div;\r\n                ioInput = io3Input_input;\r\n                break;\r\n            default:\r\n                throw Error('Unknown IO');\r\n        }\r\n        ioInputWindow.classList.add('displayGrid');\r\n        ioInput.select();\r\n        try {\r\n            while (check) {\r\n                buttonController.pause();\r\n                await checkPlayPressed();\r\n                if (ioInput.value === '')\r\n                    ioInput.value = 'FF';\r\n                if (checkValidHex(ioInput.value)) {\r\n                    check = false;\r\n                }\r\n                else {\r\n                    if (IoName === 'IO1') {\r\n                        io1InputInfo_p.classList.add('redBg');\r\n                        io1InputInfo_p.textContent = 'Das ist keine gültige zweistellige Hex-Zahl. Verwenden Sie nur die Zahlen  0-9 und die Zeichen A-F!';\r\n                    }\r\n                    else if (IoName === 'IO2') {\r\n                        io2InputInfo_p.classList.add('redBg');\r\n                        io2InputInfo_p.textContent = 'Das ist keine gültige zweistellige Hex-Zahl. Verwenden Sie nur die Zahlen  0-9 und die Zeichen A-F!';\r\n                    }\r\n                    else if (IoName === 'IO3') {\r\n                        io3InputInfo_p.classList.add('redBg');\r\n                        io3InputInfo_p.textContent = 'Das ist keine gültige zweistellige Hex-Zahl. Verwenden Sie nur die Zahlen  0-9 und die Zeichen A-F!';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            ioInputWindow.classList.remove('displayGrid');\r\n            io1InputInfo_p.classList.remove('redBg');\r\n            io2InputInfo_p.classList.remove('redBg');\r\n            io3InputInfo_p.classList.remove('redBg');\r\n            io1InputInfo_p.textContent = 'Geben Sie eine zweistellige Hexadezimalzahl ein!';\r\n            utils_getHtmlElement('io2InputInfo_p').textContent = 'Geben Sie eine zweistellige Hexadezimalzahl ein!';\r\n            utils_getHtmlElement('io3InputInfo_p').textContent = 'Geben Sie eine zweistellige Hexadezimalzahl ein!';\r\n            programStatus.ioInputDisplayed = false;\r\n        }\r\n        await registerAnimator.registerUpdate(IoName, convertHexToNumber(ioInput.value));\r\n        ioInput.value = '';\r\n    }\r\n}\r\nconst ioAnimator = new IOAnimator();\r\n\n;// CONCATENATED MODULE: ./src/animators/TransferAnimator.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass TransferAnimator {\r\n    constructor() {\r\n        this.movingObject = utils_getHtmlElement('movingObject_h2');\r\n        this.animationSpeed = 3;\r\n        this.target = '';\r\n        this.origin = '';\r\n        this.pointsFromOriginToTarget = [];\r\n        this.valueToTransfer = 0;\r\n    }\r\n    async transfer(origin, target, value = 0) {\r\n        this.updateClassVariables(origin, target, value);\r\n        this.updateMovingObjectValue();\r\n        this.updateMovingObjectPosition(this.pointsFromOriginToTarget[0].x, this.pointsFromOriginToTarget[0].y);\r\n        this.updateMovingObjectSize();\r\n        if (programStatus.animationType_1) {\r\n            this.displayMovingObject();\r\n            await this.transferType1();\r\n        }\r\n        else if (programStatus.animationType_2) {\r\n            this.displayMovingObject();\r\n            await this.transferType2();\r\n        }\r\n        else if (programStatus.noAnimation)\r\n            await this.animateOnlyDecoder();\r\n        this.hideMovingObject();\r\n    }\r\n    updateClassVariables(origin, target, value) {\r\n        this.origin = origin;\r\n        this.target = target;\r\n        this.valueToTransfer = value;\r\n        this.pointsFromOriginToTarget = getPointsAtoB(origin, target);\r\n    }\r\n    updateMovingObjectValue() {\r\n        let textContent;\r\n        //convert value_number to hex_4digits if required\r\n        if (this.valueToTransfer > 255 || this.origin === 'ROM2' || this.origin === 'RAM2' || this.origin === 'ZR' || this.origin === 'PC' || this.origin === 'IX' || this.origin === 'HL' || this.origin === 'SP')\r\n            textContent = convertNumberToHex_4digits(this.valueToTransfer);\r\n        else\r\n            textContent = convertNumberToHex_2digits(this.valueToTransfer);\r\n        this.movingObject.textContent = textContent;\r\n    }\r\n    updateMovingObjectPosition(xCoordinate, yCoordinate) {\r\n        if (yCoordinate > 30)\r\n            yCoordinate = 30;\r\n        this.movingObject.style.top = `${100 / animationWindow.sectionsCountHeight * yCoordinate}%`;\r\n        this.movingObject.style.left = `${100 / animationWindow.sectionsCountWidth * xCoordinate}%`;\r\n    }\r\n    updateMovingObjectSize() {\r\n        if (this.valueToTransfer > 255 || this.target === 'ROM2' || this.target === 'RAM2' || this.target === 'ZR' || this.target === 'PC' || this.target === 'IX' || this.target === 'HL' || this.target === 'SP')\r\n            this.movingObject.classList.add('rectangle4x2');\r\n        else\r\n            this.movingObject.classList.remove('rectangle4x2');\r\n    }\r\n    displayMovingObject() {\r\n        this.movingObject.classList.add('displayGrid');\r\n    }\r\n    hideMovingObject() {\r\n        this.movingObject.classList.remove('displayGrid');\r\n    }\r\n    async transferType1() {\r\n        for (let i = 0; i < this.pointsFromOriginToTarget.length; i = i + this.animationSpeed) {\r\n            const currentPoint = this.pointsFromOriginToTarget[i];\r\n            this.updateMovingObjectPosition(currentPoint.x, currentPoint.y);\r\n            if (this.checkDisplayDecoder(currentPoint))\r\n                mc8Components.DECODER.updateDOM();\r\n            else if (!mc8Components.DECODER.isRamAccess && !mc8Components.DECODER.isIoAccess) {\r\n            }\r\n            // else\r\n            //     mc8Components.DECODER.resetDOM();\r\n            if (programStatus.noAnimation) {\r\n                this.hideMovingObject();\r\n                return;\r\n            }\r\n            try {\r\n                await sleepBetweenFrames();\r\n            }\r\n            catch (e) {\r\n                this.hideMovingObject();\r\n                // mc8Components.DECODER.resetDOM();\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n    checkDisplayDecoder(point) {\r\n        const originPoint = this.pointsFromOriginToTarget[0];\r\n        const targetPoint = this.pointsFromOriginToTarget[this.pointsFromOriginToTarget.length - 1];\r\n        if (point !== undefined) {\r\n            if (!this.isInCpu(point))\r\n                return true;\r\n            return false;\r\n        }\r\n        if (this.isInCpu(originPoint) && !this.isInCpu(targetPoint))\r\n            return true;\r\n        return false;\r\n    }\r\n    isInCpu(point) {\r\n        if (point.y < 24 && point.y > 3 && point.x > 11 && point.x < 38)\r\n            return true;\r\n        return false;\r\n    }\r\n    async transferType2() {\r\n        let pathElements = [];\r\n        let addX = 0;\r\n        if (this.checkDisplayDecoder())\r\n            mc8Components.DECODER.updateDOM();\r\n        if (this.pointsFromOriginToTarget[0].x === 16 && this.pointsFromOriginToTarget[this.pointsFromOriginToTarget.length - 10].y === 24) {\r\n            addX = 1;\r\n        }\r\n        for (let i = this.pointsFromOriginToTarget.length - 1; i > 0; i -= 6) {\r\n            if (this.pointsFromOriginToTarget[i].y < 30)\r\n                pathElements.push(this.createPathElement(this.pointsFromOriginToTarget[i].x + addX, this.pointsFromOriginToTarget[i].y));\r\n        }\r\n        pathElements.push(this.createLastPathElement());\r\n        this.displayPath(pathElements);\r\n        try {\r\n            for (let i = 0; i < 10; i++) {\r\n                await pauseableSleep(200 / this.animationSpeed);\r\n                if (programStatus.noAnimation) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            for (let i = 0; i < pathElements.length; i++) {\r\n                pathElements[i].remove();\r\n            }\r\n            this.hideMovingObject();\r\n        }\r\n        if (this.checkResetDecoder()) {\r\n            mc8Components.DECODER.resetDOM();\r\n        }\r\n    }\r\n    createPathElement(xCoordinate, yCoordinate) {\r\n        let element = document.createElement('div');\r\n        element.style.left = `${100 / animationWindow.sectionsCountWidth * (xCoordinate + 0.5)}%`;\r\n        element.style.top = `${100 / animationWindow.sectionsCountHeight * (yCoordinate + 0.5)}%`;\r\n        element.classList.add('positionAbsolute', 'square1x1', 'pathElement', 'alignBg', 'rounded');\r\n        return element;\r\n    }\r\n    createLastPathElement() {\r\n        let last = document.createElement('h2');\r\n        let xCoordinate = this.pointsFromOriginToTarget[this.pointsFromOriginToTarget.length - 1].x;\r\n        let yCoordinate = this.pointsFromOriginToTarget[this.pointsFromOriginToTarget.length - 1].y;\r\n        if (yCoordinate > 30)\r\n            yCoordinate = 30;\r\n        last.style.left = `${100 / animationWindow.sectionsCountWidth * xCoordinate}%`;\r\n        last.style.top = `${100 / animationWindow.sectionsCountHeight * yCoordinate}%`;\r\n        last.textContent = this.movingObject.textContent;\r\n        last.classList.add('yellowBg', 'borderBox', 'square2x2', 'positionAbsolute', 'centered', 'rounded');\r\n        if (this.origin === 'PC' || this.origin === 'ZR' || this.origin === 'HL' || this.origin === 'SP' || this.origin === 'IX')\r\n            last.classList.add('rectangle4x2');\r\n        return last;\r\n    }\r\n    displayPath(pathElements) {\r\n        pathElements.forEach(element => {\r\n            animationWindow.mc8_div.appendChild(element);\r\n        });\r\n    }\r\n    checkResetDecoder() {\r\n        if (!mc8Components.DECODER.isRamAccess && !mc8Components.DECODER.isIoAccess)\r\n            return false;\r\n        return true;\r\n    }\r\n    async animateOnlyDecoder() {\r\n        mc8Components.DECODER.updateDOM();\r\n        try {\r\n            await sleepForNOANIMATIONIDLETIME();\r\n        }\r\n        catch (e) {\r\n            mc8Components.DECODER.resetDOM();\r\n            throw e;\r\n        }\r\n        finally {\r\n            mc8Components.DECODER.resetDOM();\r\n        }\r\n    }\r\n    async readFromMemoryInRegister(addressRegister, targetRegister) {\r\n        const address = mc8Components.getRegisterByName(addressRegister).value;\r\n        mc8Components.DECODER.update(1, 0, 0, 1, address);\r\n        await arrowAnimator.displayRegisterArrow(addressRegister);\r\n        //determine ROM or RAM or IOs\r\n        if (address < 8192) {\r\n            await this.transfer(addressRegister, 'ROM2', address);\r\n            await this.transfer(mc8Components.ROM.getCellId(address), targetRegister, mc8Components.ROM.getCellValue(address));\r\n            await registerAnimator.registerUpdate(targetRegister, mc8Components.ROM.getCellValue(address));\r\n        }\r\n        else if (address >= mc8Components.RAM.startAddress && address < mc8Components.RAM.startAddress + mc8Components.RAM.size) {\r\n            mc8Components.RAM.updateVariableCells(address);\r\n            await this.transfer(addressRegister, 'RAM2', address);\r\n            await this.transfer(mc8Components.RAM.getRamElementId(address), targetRegister, mc8Components.RAM.getValue(address));\r\n            await registerAnimator.registerUpdate(targetRegister, mc8Components.RAM.getValue(address));\r\n        }\r\n        else if (!mc8Components.IO1.ioMapped_boolean) {\r\n            if (address === mc8Components.IO1.address) {\r\n                await this.transfer(addressRegister, 'DEC_UPDATE', address);\r\n                await ioAnimator.animateIoUserInput('IO1');\r\n                await this.transfer('IO1', 'A', mc8Components.IO1.value);\r\n                await registerAnimator.registerUpdate('A', mc8Components.IO1.value);\r\n            }\r\n            else if (address === mc8Components.IO2.address) {\r\n                await this.transfer(addressRegister, 'DEC_UPDATE', address);\r\n                await ioAnimator.animateIoUserInput('IO2');\r\n                await this.transfer('IO2', 'A', mc8Components.IO2.value);\r\n                await registerAnimator.registerUpdate('A', mc8Components.IO2.value);\r\n            }\r\n            else if (address === mc8Components.IO3.address) {\r\n                await this.transfer(addressRegister, 'DEC_UPDATE', address);\r\n                await ioAnimator.animateIoUserInput('IO2');\r\n                await this.transfer('IO2', 'A', mc8Components.IO3.value);\r\n                await registerAnimator.registerUpdate('A', mc8Components.IO3.value);\r\n            }\r\n        }\r\n        //Neither ROM or RAM  or IOs\r\n        else {\r\n            //The address of the addressRegister is unknown.\r\n            //the following code wont be executed completely, because the decoder will interrupt execution\r\n            await this.transfer(addressRegister, 'ROM2', address);\r\n        }\r\n        mc8Components.DECODER.resetDOM();\r\n    }\r\n    async writeToMemoryFromRegister(addressRegister, dataRegister) {\r\n        let ramEle_htmlElement;\r\n        //get address\r\n        const address_number = mc8Components.getRegisterByName(addressRegister).value;\r\n        //get data\r\n        const register_class = mc8Components.getRegisterByName(dataRegister);\r\n        let data_number = register_class.value;\r\n        if (register_class instanceof Register_x4) {\r\n            if (dataRegister.includes('hi'))\r\n                data_number = register_class.hiValue;\r\n            if (dataRegister.includes('lo'))\r\n                data_number = register_class.loValue;\r\n        }\r\n        //update decoder, without displaying it\r\n        mc8Components.DECODER.update(0, 1, 0, 1, address_number);\r\n        await arrowAnimator.displayRegisterArrow(addressRegister);\r\n        //determine ROM or RAM\r\n        if (address_number < 8192) {\r\n            //wont be executed completely, because the decoder will interrupt execution \r\n            await this.transfer(addressRegister, 'ROM2', address_number);\r\n        }\r\n        else if (address_number >= mc8Components.RAM.startAddress && address_number < mc8Components.RAM.startAddress + mc8Components.RAM.size) {\r\n            ramEle_htmlElement = utils_getHtmlElement(mc8Components.RAM.getRamElementId(address_number));\r\n            mc8Components.RAM.updateVariableCells(address_number);\r\n            await this.transfer(addressRegister, 'RAM2', address_number);\r\n            if (!programStatus.noAnimation)\r\n                ramEle_htmlElement.classList.add('yellowBg', 'borderBox');\r\n            try {\r\n                await this.transfer(dataRegister, mc8Components.RAM.getRamElementId(address_number), data_number);\r\n            }\r\n            catch (e) {\r\n                ramEle_htmlElement.classList.remove('yellowBg', 'borderBox');\r\n                throw e;\r\n            }\r\n        }\r\n        //Neither ROM or RAM\r\n        else {\r\n            //wont be executed completely, because the decoder will interrupt execution \r\n            await this.transfer(addressRegister, 'ROM1', address_number);\r\n        }\r\n        mc8Components.RAM.updateElement(address_number, data_number);\r\n        try {\r\n            await addYellowBackgroundTo(utils_getHtmlElement(mc8Components.RAM.getRamElementId(address_number)));\r\n        }\r\n        finally {\r\n            utils_getHtmlElement(mc8Components.RAM.getRamElementId(address_number)).classList.remove('borderBox', 'yellowBg');\r\n            mc8Components.DECODER.resetDOM();\r\n        }\r\n    }\r\n    async readFromIo() {\r\n        if (mc8Components.IO1.ioMapped_boolean) {\r\n            mc8Components.DECODER.update(1, 0, 1, 0, mc8Components.ZR.loValue);\r\n            await transferAnimator.transfer('ZR', 'DEC_UPDATE', mc8Components.ZR.loValue);\r\n            if (mc8Components.IO1.address === mc8Components.IO2.address) {\r\n                if (!mc8Components.IO1.isInput) {\r\n                    await transferAnimator.transfer('A', 'IO2', mc8Components.A.value);\r\n                    await registerAnimator.registerUpdate('IO2', mc8Components.A.value);\r\n                }\r\n                else {\r\n                    await transferAnimator.transfer('A', 'IO1', mc8Components.A.value);\r\n                    await registerAnimator.registerUpdate('IO1', mc8Components.A.value);\r\n                }\r\n            }\r\n            else if (mc8Components.IO3.address === mc8Components.IO2.address) {\r\n                if (!mc8Components.IO3.isInput) {\r\n                    await transferAnimator.transfer('A', 'IO2', mc8Components.A.value);\r\n                    await registerAnimator.registerUpdate('IO2', mc8Components.A.value);\r\n                }\r\n                else {\r\n                    await transferAnimator.transfer('A', 'IO3', mc8Components.A.value);\r\n                    await registerAnimator.registerUpdate('IO3', mc8Components.A.value);\r\n                }\r\n            }\r\n            else if (mc8Components.IO1.address === mc8Components.IO3.address) {\r\n                if (!mc8Components.IO1.isInput) {\r\n                    await transferAnimator.transfer('A', 'IO3', mc8Components.A.value);\r\n                    await registerAnimator.registerUpdate('IO3', mc8Components.A.value);\r\n                }\r\n                else {\r\n                    await transferAnimator.transfer('A', 'IO1', mc8Components.A.value);\r\n                    await registerAnimator.registerUpdate('IO1', mc8Components.A.value);\r\n                }\r\n            }\r\n            else if (mc8Components.ZR.loValue === mc8Components.IO1.address) {\r\n                await ioAnimator.animateIoUserInput('IO1');\r\n                await transferAnimator.transfer('IO1', 'A', mc8Components.IO1.value);\r\n                await registerAnimator.registerUpdate('A', mc8Components.IO1.value);\r\n            }\r\n            else if (mc8Components.ZR.loValue === mc8Components.IO2.address) {\r\n                await ioAnimator.animateIoUserInput('IO2');\r\n                await transferAnimator.transfer('IO2', 'A', mc8Components.IO2.value);\r\n                await registerAnimator.registerUpdate('A', mc8Components.IO2.value);\r\n            }\r\n            else if (mc8Components.ZR.loValue === mc8Components.IO3.address) {\r\n                await ioAnimator.animateIoUserInput('IO3');\r\n                await transferAnimator.transfer('IO3', 'A', mc8Components.IO3.value);\r\n                await registerAnimator.registerUpdate('A', mc8Components.IO3.value);\r\n            }\r\n            mc8Components.DECODER.resetDOM();\r\n        }\r\n        else {\r\n            mc8Components.DECODER.update(1, 0, 1, 0, mc8Components.ZR.value);\r\n            await transferAnimator.transfer('ZR', 'DEC_UPDATE', mc8Components.ZR.value);\r\n            if (mc8Components.IO1.address === mc8Components.IO2.address) {\r\n                if (!mc8Components.IO1.isInput) {\r\n                    await transferAnimator.transfer('A', 'IO2', mc8Components.A.value);\r\n                    await registerAnimator.registerUpdate('IO2', mc8Components.A.value);\r\n                }\r\n                else {\r\n                    await transferAnimator.transfer('A', 'IO1', mc8Components.A.value);\r\n                    await registerAnimator.registerUpdate('IO1', mc8Components.A.value);\r\n                }\r\n            }\r\n            else if (mc8Components.IO3.address === mc8Components.IO2.address) {\r\n                if (!mc8Components.IO3.isInput) {\r\n                    await transferAnimator.transfer('A', 'IO2', mc8Components.A.value);\r\n                    await registerAnimator.registerUpdate('IO2', mc8Components.A.value);\r\n                }\r\n                else {\r\n                    await transferAnimator.transfer('A', 'IO3', mc8Components.A.value);\r\n                    await registerAnimator.registerUpdate('IO3', mc8Components.A.value);\r\n                }\r\n            }\r\n            else if (mc8Components.IO1.address === mc8Components.IO3.address) {\r\n                if (!mc8Components.IO1.isInput) {\r\n                    await transferAnimator.transfer('A', 'IO3', mc8Components.A.value);\r\n                    await registerAnimator.registerUpdate('IO3', mc8Components.A.value);\r\n                }\r\n                else {\r\n                    await transferAnimator.transfer('A', 'IO1', mc8Components.A.value);\r\n                    await registerAnimator.registerUpdate('IO1', mc8Components.A.value);\r\n                }\r\n            }\r\n            else if (mc8Components.ZR.value === mc8Components.IO1.address) {\r\n                await ioAnimator.animateIoUserInput('IO1');\r\n                await transferAnimator.transfer('IO1', 'A', mc8Components.IO1.value);\r\n                await registerAnimator.registerUpdate('A', mc8Components.IO1.value);\r\n            }\r\n            else if (mc8Components.ZR.value === mc8Components.IO2.address) {\r\n                await ioAnimator.animateIoUserInput('IO2');\r\n                await transferAnimator.transfer('IO2', 'A', mc8Components.IO2.value);\r\n                await registerAnimator.registerUpdate('A', mc8Components.IO2.value);\r\n            }\r\n            else if (mc8Components.ZR.value === mc8Components.IO3.address) {\r\n                await ioAnimator.animateIoUserInput('IO3');\r\n                await transferAnimator.transfer('IO3', 'A', mc8Components.IO3.value);\r\n                await registerAnimator.registerUpdate('A', mc8Components.IO3.value);\r\n            }\r\n            mc8Components.DECODER.resetDOM();\r\n        }\r\n    }\r\n    async writeToIo() {\r\n        mc8Components.DECODER.update(0, 1, 1, 0, mc8Components.ZR.loValue);\r\n        await transferAnimator.transfer('ZR', 'DEC_UPDATE', mc8Components.ZR.loValue);\r\n        if (mc8Components.IO1.address === mc8Components.IO2.address) {\r\n            if (mc8Components.IO1.isInput) {\r\n                await transferAnimator.transfer('A', 'IO2', mc8Components.A.value);\r\n                await registerAnimator.registerUpdate('IO2', mc8Components.A.value);\r\n            }\r\n            else {\r\n                await transferAnimator.transfer('A', 'IO1', mc8Components.A.value);\r\n                await registerAnimator.registerUpdate('IO1', mc8Components.A.value);\r\n            }\r\n        }\r\n        else if (mc8Components.IO3.address === mc8Components.IO2.address) {\r\n            if (mc8Components.IO3.isInput) {\r\n                await transferAnimator.transfer('A', 'IO2', mc8Components.A.value);\r\n                await registerAnimator.registerUpdate('IO2', mc8Components.A.value);\r\n            }\r\n            else {\r\n                await transferAnimator.transfer('A', 'IO3', mc8Components.A.value);\r\n                await registerAnimator.registerUpdate('IO3', mc8Components.A.value);\r\n            }\r\n        }\r\n        else if (mc8Components.IO1.address === mc8Components.IO3.address) {\r\n            if (mc8Components.IO1.isInput) {\r\n                await transferAnimator.transfer('A', 'IO3', mc8Components.A.value);\r\n                await registerAnimator.registerUpdate('IO3', mc8Components.A.value);\r\n            }\r\n            else {\r\n                await transferAnimator.transfer('A', 'IO1', mc8Components.A.value);\r\n                await registerAnimator.registerUpdate('IO1', mc8Components.A.value);\r\n            }\r\n        }\r\n        else if (mc8Components.ZR.loValue === mc8Components.IO1.address) {\r\n            await transferAnimator.transfer('A', 'IO1', mc8Components.A.value);\r\n            await registerAnimator.registerUpdate('IO1', mc8Components.A.value);\r\n        }\r\n        else if (mc8Components.ZR.loValue === mc8Components.IO2.address) {\r\n            await transferAnimator.transfer('A', 'IO2', mc8Components.A.value);\r\n            await registerAnimator.registerUpdate('IO2', mc8Components.A.value);\r\n        }\r\n        else if (mc8Components.ZR.loValue === mc8Components.IO3.address) {\r\n            await transferAnimator.transfer('A', 'IO3', mc8Components.A.value);\r\n            await registerAnimator.registerUpdate('IO3', mc8Components.A.value);\r\n        }\r\n        mc8Components.DECODER.resetDOM();\r\n    }\r\n}\r\nconst transferAnimator = new TransferAnimator();\r\n\n;// CONCATENATED MODULE: ./src/settingsWindow.ts\n\r\n\r\n\r\n\r\n\r\nclass settingsWindow {\r\n    constructor() {\r\n        this.containerSettings = getHtmlElement('containerSettings_div');\r\n        this.programSelection_select = getHtmlElement('programSelection_select');\r\n        this.linkerFile_textarea = getHtmlElement('linkerFile_textarea');\r\n        this.radioIoMapped_input = getHtmlElement('radioIoMapped_input');\r\n        this.radioMemoryMap_input = getHtmlElement('radioMemoryMap_input');\r\n        this.io1Address_textarea = getHtmlElement('io1Address_textarea');\r\n        this.io2Address_textarea = getHtmlElement('io2Address_textarea');\r\n        this.io3Address_textarea = getHtmlElement('io3Address_textarea');\r\n        this.io1InputRadio_input = getHtmlElement('io1InputRadio_input');\r\n        this.io2InputRadio_input = getHtmlElement('io2InputRadio_input');\r\n        this.io3InputRadio_input = getHtmlElement('io3InputRadio_input');\r\n        this.io1OutputRadio_input = getHtmlElement('io1OutputRadio_input');\r\n        this.io2OutputRadio_input = getHtmlElement('io2OutputRadio_input');\r\n        this.io3OutputRadio_input = getHtmlElement('io3OutputRadio_input');\r\n        this.io1Arrow_div = getHtmlElement('io1Arrow_div');\r\n        this.io2Arrow_div = getHtmlElement('io2Arrow_div');\r\n        this.io3Arrow_div = getHtmlElement('io3Arrow_div');\r\n        this.ramAddress_select = getHtmlElement('ramAddress_select');\r\n        this.breakpointsCheckbox_input = getHtmlElement('breakpointsCheckbox_input');\r\n        this.breakpointsCheckbox_div = getHtmlElement('breakpointsCheckbox_div');\r\n        this.errorWindow_div = getHtmlElement('errorWindow_div');\r\n        this.errorMessage_textarea = getHtmlElement('errorMessage_textarea');\r\n    }\r\n}\r\nconst ROM = mc8Components.ROM;\r\nconst RAM = mc8Components.RAM;\r\nconst IO1 = mc8Components.IO1;\r\nconst IO2 = mc8Components.IO2;\r\nconst IO3 = mc8Components.IO3;\r\nconst containerSettings_div = utils_getHtmlElement('containerSettings_div');\r\nconst programSelection_select = utils_getHtmlElement('programSelection_select');\r\nconst settingsWindow_linkerFile_textarea = utils_getHtmlElement('linkerFile_textarea');\r\nconst radioIoMapped_input = utils_getHtmlElement('radioIoMapped_input');\r\nconst radioMemoryMap_input = utils_getHtmlElement('radioMemoryMap_input');\r\nconst io1Address_textarea = utils_getHtmlElement('io1Address_textarea');\r\nconst io2Address_textarea = utils_getHtmlElement('io2Address_textarea');\r\nconst io3Address_textarea = utils_getHtmlElement('io3Address_textarea');\r\nconst io1InputRadio_input = utils_getHtmlElement('io1InputRadio_input');\r\nconst io2InputRadio_input = utils_getHtmlElement('io2InputRadio_input');\r\nconst io3InputRadio_input = utils_getHtmlElement('io3InputRadio_input');\r\nconst io1OutputRadio_input = utils_getHtmlElement('io1OutputRadio_input');\r\nconst io2OutputRadio_input = utils_getHtmlElement('io2OutputRadio_input');\r\nconst io3OutputRadio_input = utils_getHtmlElement('io3OutputRadio_input');\r\nconst io1Arrow_div = utils_getHtmlElement('io1Arrow_div');\r\nconst io2Arrow_div = utils_getHtmlElement('io2Arrow_div');\r\nconst io3Arrow_div = utils_getHtmlElement('io3Arrow_div');\r\nconst ramAddress_select = utils_getHtmlElement('ramAddress_select');\r\nconst settingsWindow_breakpointsCheckbox_input = utils_getHtmlElement('breakpointsCheckbox_input');\r\nconst breakpointsCheckbox_div = utils_getHtmlElement('breakpointsCheckbox_div');\r\nconst errorWindow_div = utils_getHtmlElement('errorWindow_div');\r\nconst errorMessage_textarea = utils_getHtmlElement('errorMessage_textarea');\r\nconst checkLinkerFile = (errorMessage_string, count_number) => {\r\n    const intelHexArray = settingsWindow_linkerFile_textarea.value.split('\\n');\r\n    let noError = true;\r\n    let recordLength = 0;\r\n    for (let i = 0; i < intelHexArray.length; i++) {\r\n        const record = intelHexArray[i].trim();\r\n        if (record === '')\r\n            continue;\r\n        //check if line starts with :\r\n        if (noError) {\r\n            if (record[0] !== ':') {\r\n                errorMessage_string += `${count_number}) Fehler in der Linker-Datei in Zeile ${i + 1}:\\nJede Zeile muss mit einem : beginnen.\\n\\n`;\r\n                count_number++;\r\n                noError = false;\r\n            }\r\n        }\r\n        //check if line includes whitespace\r\n        if (noError) {\r\n            if (record.includes(' ')) {\r\n                errorMessage_string += `${count_number}) Fehler in der Linker-Datei in Zeile ${i + 1}:\\nEs dürfen keine Leerzeichen in einem Record vorhanden sein.\\n\\n`;\r\n                count_number++;\r\n                noError = false;\r\n            }\r\n        }\r\n        //check record length\r\n        if (noError) {\r\n            if (!checkValidHex(record[1] + record[2])) {\r\n                errorMessage_string += `${count_number}) Fehler in der Linker-Datei in Zeile ${i + 1}: Recordlänge ${record[1] + record[2]} ist keine gültige HEX-Zahl.\\n\\n`;\r\n                count_number++;\r\n                noError = false;\r\n            }\r\n            if (noError) {\r\n                recordLength = convertHexToNumber(record[1] + record[2]);\r\n                if (record.length < 1 + 2 + 4 + 2 + recordLength * 2 + 2) {\r\n                    errorMessage_string += `${count_number}) Fehler in der Linker-Datei in Zeile ${i + 1}: Recordlänge ${record[1] + record[2]} stimmt nicht mit der Länge des Datensatzes überein.\\n\\n`;\r\n                    count_number++;\r\n                    noError = false;\r\n                }\r\n            }\r\n        }\r\n        //check record address\r\n        if (noError) {\r\n            if (!checkValidHex(record[3] + record[4] + record[5] + record[6])) {\r\n                errorMessage_string += `${count_number}) Fehler in der Linker-Datei in Zeile ${i + 1}: Recordadresse ${record[3] + record[4] + record[5] + record[6]} ist keine gültige HEX-Zahl.\\n\\n`;\r\n                count_number++;\r\n                noError = false;\r\n            }\r\n            //TODO: check if bigger than 1999h ??\r\n        }\r\n        //check record type\r\n        if (noError) {\r\n            if (!checkValidHex(record[7] + record[8])) {\r\n                errorMessage_string += `${count_number}) Fehler in der Linker-Datei in Zeile ${i + 1}: Recordtyp ${record[7] + record[8]} ist keine gültige HEX-Zahl.\\n\\n`;\r\n                count_number++;\r\n                noError = false;\r\n            }\r\n            //check if type is a data-record\r\n            if (noError) {\r\n                if (recordLength === 0 && convertHexToNumber(record[7] + record[8]) === 0) {\r\n                    errorMessage_string += `${count_number}) Fehler in der Linker-Datei in Zeile ${i + 1}: Recordlänge ${record[1] + record[2]} muss für einen Daten-Recordtyp größer als null sein.\\n\\n`;\r\n                    count_number++;\r\n                    noError = false;\r\n                }\r\n            }\r\n            if (noError) {\r\n                if (convertHexToNumber(record[7] + record[8]) > 1) {\r\n                    errorMessage_string += `${count_number}) Fehler in der Linker-Datei in Zeile ${i + 1}: Unbekannter Recordtyp ${record[7] + record[8]}.\r\n                    \\n\\n`;\r\n                    count_number++;\r\n                    noError = false;\r\n                }\r\n            }\r\n        }\r\n        //check data\r\n        if (noError) {\r\n            recordLength = convertHexToNumber(record[1] + record[2]);\r\n            for (let j = 0; j < recordLength * 2; j = j + 2) {\r\n                if (!checkValidHex(record[9 + j] + record[10 + j])) {\r\n                    errorMessage_string += `${count_number}) Fehler in der Linker-Datei in Zeile ${i + 1}: Datenbyte ${record[9 + j] + record[10 + j]} ist keine gültige HEX-Zahl.\\n\\n`;\r\n                    count_number++;\r\n                    noError = false;\r\n                }\r\n            }\r\n        }\r\n        //check checksum\r\n        if (noError) {\r\n            if (!checkValidHex(record[9 + recordLength * 2] + record[10 + recordLength * 2])) {\r\n                errorMessage_string += `${count_number}) Fehler in der Linker-Datei in Zeile ${i + 1}: Checkumme ${record[9 + recordLength * 2] + record[10 + recordLength * 2]} ist keine gültige HEX-Zahl.\\n\\n`;\r\n                count_number++;\r\n                noError = false;\r\n            }\r\n            //TODO: check with new mc8assembler\r\n            else if (calculateChecksum(record) !== '00') {\r\n                errorMessage_string += `${count_number}) Fehler in der Linker-Datei in Zeile ${i + 1}: Checkumme ${record[9 + recordLength * 2] + record[10 + recordLength * 2]} ist nicht korrekt. Richtige Checksumme: ${calculateChecksum(record.slice(0, -2))}\\n\\n`;\r\n                noError = false;\r\n            }\r\n        }\r\n    }\r\n    return [errorMessage_string, count_number];\r\n};\r\n//checks if IOs and Ram were set correctly\r\nconst checkSettings = () => {\r\n    let errorMessage_string = '';\r\n    let count = 1;\r\n    const buf = checkLinkerFile(errorMessage_string, count);\r\n    errorMessage_string = buf[0];\r\n    count = buf[1];\r\n    if (io1Address_textarea.value === '')\r\n        io1Address_textarea.value = '0000';\r\n    if (io2Address_textarea.value === '')\r\n        io2Address_textarea.value = '0000';\r\n    if (io3Address_textarea.value === '')\r\n        io3Address_textarea.value = '0000';\r\n    //check if inputs are valid hex-numbers\r\n    if (!checkValidHex(io1Address_textarea.value)) {\r\n        errorMessage_string += `${count}) Die Adresse ${io1Address_textarea.value}h von IO1 ist keine gültige HEX-Zahl. Bitte verwenden Sie nur die Ziffern 0-9 und die Zeichen A-F.\r\n        \\n\\n`;\r\n        count++;\r\n    }\r\n    if (!checkValidHex(io2Address_textarea.value)) {\r\n        errorMessage_string += `${count}) Die Adresse ${io2Address_textarea.value}h von IO2 ist keine gültige HEX-Zahl. Bitte verwenden Sie nur die Ziffern 0-9 und die Zeichen A-F.\r\n        \\n\\n`;\r\n        count++;\r\n    }\r\n    if (!checkValidHex(io3Address_textarea.value)) {\r\n        errorMessage_string += `${count}) Die Adresse ${io3Address_textarea.value}h von IO3 ist keine gültige HEX-Zahl. Bitte verwenden Sie nur die Ziffern 0-9 und die Zeichen A-F.\r\n        \\n\\n`;\r\n        count++;\r\n    }\r\n    //check if inputs reside on same address and are both inputs/outputs\r\n    if ((convertHexToNumber(io1Address_textarea.value) === convertHexToNumber(io2Address_textarea.value)) && (io1InputRadio_input.checked === io2InputRadio_input.checked)) {\r\n        errorMessage_string += `${count}) IO1 und IO2 liegen auf der gleichen Adresse. Dies ist nur erlaubt, wenn es sich um einen Eingabe- und um einen Ausgabebaustein handelt.\\n\\n`;\r\n        count++;\r\n    }\r\n    if ((convertHexToNumber(io1Address_textarea.value) === convertHexToNumber(io3Address_textarea.value)) && (io1InputRadio_input.checked === io3InputRadio_input.checked)) {\r\n        errorMessage_string += `${count}) IO1 und IO3 liegen auf der gleichen Adresse. Dies ist nur erlaubt, wenn es sich um einen Eingabe- und um einen Ausgabebaustein handelt.\\n\\n`;\r\n        count++;\r\n    }\r\n    if ((convertHexToNumber(io2Address_textarea.value) === convertHexToNumber(io3Address_textarea.value)) && (io2InputRadio_input.checked === io3InputRadio_input.checked)) {\r\n        errorMessage_string += `${count}) IO2 und IO3 liegen auf der gleichen Adresse. Dies ist nur erlaubt, wenn es sich um einen Eingabe- und um einen Ausgabebaustein handelt.\\n\\n`;\r\n        count++;\r\n    }\r\n    if (radioIoMapped_input.checked) {\r\n        //if io-mapped: check if inputs are to big\r\n        if (convertHexToNumber(io1Address_textarea.value) > convertHexToNumber('FF')) {\r\n            errorMessage_string += `${count}) Die Adresse ${io1Address_textarea.value}h von IO1 ist zu groß. Bitte verwenden Sie bei IO-mapping 8-Bit Adressen (Wertebereich 00h bis FFh).\\n\\n`;\r\n            count++;\r\n        }\r\n        if (convertHexToNumber(io2Address_textarea.value) > convertHexToNumber('FF')) {\r\n            errorMessage_string += `${count}) Die Adresse ${io2Address_textarea.value}h von IO2 ist zu groß. Bitte verwenden Sie bei IO-mapping 8-Bit Adressen (Wertebereich 00h bis FFh).\\n\\n`;\r\n            count++;\r\n        }\r\n        if (convertHexToNumber(io3Address_textarea.value) > convertHexToNumber('FF')) {\r\n            errorMessage_string += `${count}) Die Adresse ${io3Address_textarea.value}h von IO3 ist zu groß. Bitte verwenden Sie bei IO-mapping 8-Bit Adressen (Wertebereich 00h bis FFh).\\n\\n`;\r\n            count++;\r\n        }\r\n    }\r\n    else {\r\n        //if memory-mapped: check if inputs are to big\r\n        if (convertHexToNumber(io1Address_textarea.value) > convertHexToNumber('FFFF')) {\r\n            errorMessage_string += `${count}) Die Adresse ${io1Address_textarea.value}h von IO1 ist zu groß. Bitte verwenden Sie bei Memory-mapping 16-Bit Adressen (Wertebereich 0000h bis FFFFh).\\n\\n`;\r\n            count++;\r\n        }\r\n        if (convertHexToNumber(io2Address_textarea.value) > convertHexToNumber('FFFF')) {\r\n            errorMessage_string += `${count}) Die Adresse ${io2Address_textarea.value}h von IO2 ist zu groß. Bitte verwenden Sie bei Memory-mapping 16-Bit Adressen (Wertebereich 0000h bis FFFFh).\\n\\n`;\r\n            count++;\r\n        }\r\n        if (convertHexToNumber(io3Address_textarea.value) > convertHexToNumber('FFFF')) {\r\n            errorMessage_string += `${count}) Die Adresse ${io3Address_textarea.value}h von IO3 ist zu groß. Bitte verwenden Sie bei Memory-mapping 16-Bit Adressen (Wertebereich 0000h bis FFFFh).\\n\\n`;\r\n            count++;\r\n        }\r\n        //check if inputs reside on ram/rom address\r\n        if (convertHexToNumber(io1Address_textarea.value) < convertHexToNumber('2000')) {\r\n            errorMessage_string += `${count}) Die Adresse ${io1Address_textarea.value}h von IO1 liegt im Adressbereich des ROM. Bitte verwenden Sie eine andere Adresse.\\n\\n`;\r\n            count++;\r\n        }\r\n        if (convertHexToNumber(io2Address_textarea.value) < convertHexToNumber('2000')) {\r\n            errorMessage_string += `${count}) Die Adresse ${io2Address_textarea.value}h von IO2 liegt im Adressbereich des ROM. Bitte verwenden Sie eine andere Adresse.\\n\\n`;\r\n            count++;\r\n        }\r\n        if (convertHexToNumber(io3Address_textarea.value) < convertHexToNumber('2000')) {\r\n            errorMessage_string += `${count}) Die Adresse ${io3Address_textarea.value}h von IO3 liegt im Adressbereich des ROM. Bitte verwenden Sie eine andere Adresse.\\n\\n`;\r\n            count++;\r\n        }\r\n        if (convertHexToNumber(io1Address_textarea.value) >= RAM.startAddress && convertHexToNumber(io1Address_textarea.value) < (RAM.startAddress + 8192)) {\r\n            errorMessage_string += `${count}) Die Adresse ${io1Address_textarea.value}h von IO1 liegt im Adressbereich des RAM. Bitte verwenden Sie eine andere Adresse für den IO-Baustein oder für das RAM.`;\r\n            count++;\r\n        }\r\n        if (convertHexToNumber(io2Address_textarea.value) >= RAM.startAddress && convertHexToNumber(io2Address_textarea.value) < (RAM.startAddress + 8192)) {\r\n            errorMessage_string += `${count}) Die Adresse ${io2Address_textarea.value}h von IO2 liegt im Adressbereich des RAM. Bitte verwenden Sie eine andere Adresse für den IO-Baustein oder für das RAM.`;\r\n            count++;\r\n        }\r\n        if (convertHexToNumber(io3Address_textarea.value) >= RAM.startAddress && convertHexToNumber(io3Address_textarea.value) < (RAM.startAddress + 8192)) {\r\n            errorMessage_string += `${count}) Die Adresse ${io3Address_textarea.value}h von IO3 liegt im Adressbereich des RAM. Bitte verwenden Sie eine andere Adresse für den IO-Baustein oder für das RAM.`;\r\n            count++;\r\n        }\r\n    }\r\n    if (errorMessage_string === '')\r\n        return true;\r\n    errorWindow_div.classList.add('displayGrid');\r\n    errorMessage_textarea.textContent = errorMessage_string;\r\n    return false;\r\n};\r\nconst changeRamAddressOnDOM = (hex1_string, hex2_string) => {\r\n    const pEle = document.getElementsByClassName('RamAddressLabel');\r\n    const str = ['0', '1', '2', '3', '4', '5', '6', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\r\n    RAM.startAddress = convertHexToNumber(hex1_string + '00');\r\n    for (let i = 0; i < pEle.length; i++) {\r\n        if (i < 7) {\r\n            pEle[i].textContent = hex1_string + str[i] + 'x';\r\n        }\r\n        else if (i === 7) {\r\n        }\r\n        else {\r\n            pEle[i].textContent = hex2_string + str[i - 1] + 'x';\r\n        }\r\n    }\r\n};\r\nconst changeRamAddress = () => {\r\n    switch (ramAddress_select.value) {\r\n        case '2000':\r\n            changeRamAddressOnDOM('20', '3F');\r\n            break;\r\n        case '4000':\r\n            changeRamAddressOnDOM('40', '5F');\r\n            break;\r\n        case '6000':\r\n            changeRamAddressOnDOM('60', '7F');\r\n            break;\r\n        case '8000':\r\n            changeRamAddressOnDOM('80', '9F');\r\n            break;\r\n        case 'A000':\r\n            changeRamAddressOnDOM('A0', 'BF');\r\n            break;\r\n        case 'C000':\r\n            changeRamAddressOnDOM('C0', 'DF');\r\n            break;\r\n        case 'E000':\r\n            changeRamAddressOnDOM('E0', 'FF');\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n};\r\nconst setSettingsDependingOnProgram = (ioMapped_boolean, io1IN_boolean, io2IN_boolean, io3IN_boolean, io1AddressHex_string, io2AddressHex_string, io3AddressHex_string, ramStartingAddressHex_string) => {\r\n    if (ioMapped_boolean) {\r\n        radioIoMapped_input.checked = true;\r\n    }\r\n    else {\r\n        radioMemoryMap_input.checked = true;\r\n    }\r\n    if (io1IN_boolean) {\r\n        io1InputRadio_input.checked = true;\r\n        io1Arrow_div.classList.remove('ioArrowOUT');\r\n    }\r\n    else {\r\n        io1OutputRadio_input.checked = true;\r\n        io1Arrow_div.classList.add('ioArrowOUT');\r\n    }\r\n    if (io2IN_boolean) {\r\n        io2InputRadio_input.checked = true;\r\n        io2Arrow_div.classList.remove('ioArrowOUT');\r\n    }\r\n    else {\r\n        io2OutputRadio_input.checked = true;\r\n        io2Arrow_div.classList.add('ioArrowOUT');\r\n    }\r\n    if (io3IN_boolean) {\r\n        io3InputRadio_input.checked = true;\r\n        io3Arrow_div.classList.remove('ioArrowOUT');\r\n    }\r\n    else {\r\n        io3OutputRadio_input.checked = true;\r\n        io3Arrow_div.classList.add('ioArrowOUT');\r\n    }\r\n    io1Address_textarea.value = io1AddressHex_string;\r\n    io2Address_textarea.value = io2AddressHex_string;\r\n    io3Address_textarea.value = io3AddressHex_string;\r\n    ramAddress_select.value = ramStartingAddressHex_string;\r\n    //change textContent of the custom selection\r\n    for (let i = 0; i < ramAddress_select.children.length; i++) {\r\n        if (ramAddress_select.children[i].value === ramStartingAddressHex_string) {\r\n            ramSelection_p.textContent = ramAddress_select.children[i].textContent;\r\n        }\r\n    }\r\n    changeRamAddress();\r\n};\r\nconst linkerFileExamplePrograms = [\r\n    'Fügen Sie hier den Inhalt der vom Linker erzeugten .OBJ-Datei ein.\\n(im Intel-HEX-Format)',\r\n    ':0100000000ff\\n:0100010000fe\\n:0100020000fd\\n:0100030000fc\\n:0100040000fb\\n:0100050000fa\\n:0100060000f9\\n:0100070000f8\\n:0100080000f7\\n:0100090000f6\\n:01000a0000f5\\n:01000b0000f4\\n:01000c0000f3\\n:01000d0000f2\\n:01000e0000f1\\n:01000f0000f0\\n:0100100000ef\\n:0100110000ee\\n:00000001FF',\r\n    ':010000003Cc3\\n:010001003Cc2\\n:010002003Cc1\\n:0100030004f8\\n:0100040004f7\\n:010005000Cee\\n:0100060023d6\\n:010007008771\\n:010008008770\\n:010009008076\\n:01000a008075\\n:01000b008173\\n:01000c008172\\n:01000d003Db5\\n:01000e003Db4\\n:01000f0005eb\\n:010010000De2\\n:01001100905e\\n:01001200905d\\n:01001300915b\\n:00000001FF',\r\n    ':020000003E11af\\n:020002000622d4\\n:020004000E33b9\\n:030006002155443d\\n:01000900787e\\n:01000a0041b4\\n:01000b004Fa5\\n:02000c003E664e\\n:01000e0047aa\\n:02000f003E773a\\n:010011004F9f\\n:020012003E8826\\n:010014007675\\n:00000001FF',\r\n    ':04000000DD212211cb\\n:02000400DD23fa\\n:02000600DD23f8\\n:02000800DD2Bee\\n:03000a002144335b\\n:01000d0023cf\\n:01000e0023ce\\n:03000f00310300ba\\n:010012007677\\n:00000001FF',\r\n    ':020000003E11af\\n:030002003200E0e9\\n:0300050021332282\\n:030008002201E0f2\\n:04000b00DD2155445a\\n:04000f00DD2203E00b\\n:010013003Cb0\\n:0100140023c8\\n:02001500DD23e9\\n:0100170047a1\\n:030018003A00E0cb\\n:03001b002A03E0d5\\n:04001e00DD2A01E0f6\\n:00000001FF',\r\n    ':020000003E12ae\\n:030002002150E0aa\\n:0100050047b3\\n:03000600324FE096\\n:01000900876f\\n:01000a004Fa6\\n:03000b003250E090\\n:01000e00876a\\n:01000f007779\\n:030010003A4FE084\\n:0100130047a5\\n:030014003A50E07f\\n:010017004F99\\n:010018007E69\\n:010019007670\\n:00000001FF',\r\n    ':0300000031FFFFce\\n:020003003EEEcf\\n:020005000622d1\\n:020007000E8861\\n:010009008076\\n:01000a00F500\\n:01000b009163\\n:01000c0047ac\\n:01000d00F101\\n:01000e008071\\n:01000f00F5fb\\n:01001000915e\\n:0100110047a7\\n:01001200F1fc\\n:010013007676\\n:00000001FF',\r\n    ':020000003E0Cb4\\n:0100020047b6\\n:020003003EC0fd\\n:010005004Fab\\n:01000600A059\\n:030007003200E0e4\\n:01000a00797c\\n:01000b00B044\\n:03000c003201E0de\\n:02000f003E179a\\n:0100110047a7\\n:020012003E713d\\n:01001400A843\\n:0100150047a3\\n:02001600CB27f6\\n:02001800CB27f4\\n:02001a00CB27f2\\n:01001c00786b\\n:01001d0007db\\n:01001e0007da\\n:01001f0007d9\\n:010020007867\\n:0100210017c7\\n:0100220017c6\\n:0100230017c5\\n:010024007665\\n:01e00000001f\\n:01e00100001e\\n:00000001FF',\r\n    ':020000003E20a0\\n:020002000610e6\\n:020004000E30bc\\n:01000600BF3a\\n:03000700CA0B0021\\n:01000a003Cb9\\n:01000b00B83c\\n:03000c00F21000ef\\n:01000f003Cb4\\n:01001000B936\\n:03001100FA1500dd\\n:010014003Caf\\n:010015008169\\n:010016008762\\n:03001700DA2300e9\\n:01001a00875e\\n:03001b00DA2300e5\\n:01001e00875a\\n:03001f00DA2300e1\\n:010022008756\\n:03002300C3000017\\n:00000001FF',\r\n    ':0300000031FFFFce\\n:0300030021700069\\n:010006007E7b\\n:02000700D30321\\n:0100090047af\\n:01000a0023d2\\n:02000b00DB0117\\n:01000d004Fa3\\n:01000e00B839\\n:03000f00C2060026\\n:010012007677\\n:01007000008f\\n:01007100107e\\n:01007200206d\\n:01007300305c\\n:00000001FF',\r\n    ':0300000031FFFFce\\n:030003003A00A020\\n:0100060047b2\\n:03000700CD4000e9\\n:03000a003A00A019\\n:01000d00B83a\\n:03000e00CA030022\\n:020040003E037d\\n:010042003D80\\n:03004300C24200b6\\n:01004600C9f0\\n:00000001FF',\r\n    ':0300000031FFFFce\\n:020003000E7776\\n:02000500DB011d\\n:01000700B93f\\n:03000800CA1A0011\\n:03000b00D214000c\\n:03000e00CD3200f0\\n:03001100C3170012\\n:03001400CD3B00e1\\n:03001700C305001e\\n:03001a00CD4400d2\\n:03001d00C3170006\\n:020032003E008e\\n:02003400D303f4\\n:020036003E99f1\\n:02003800D305ee\\n:01003a00C9fc\\n:02003b003E0085\\n:02003d00D305e9\\n:02003f003E99e8\\n:02004100D303e7\\n:01004300C9f3\\n:020044003E007c\\n:02004600D305e0\\n:020048003E0078\\n:02004a00D303de\\n:01004c00C9ea\\n:00000001FF',\r\n    ':0300000031FF3F8e\\n:02000300DB0020\\n:0100050047b3\\n:02000600DB011c\\n:03000800CD100018\\n:02000b00D3021e\\n:03000d00C303002a\\n:020010000E04dc\\n:02001200CB27fa\\n:010014000Dde\\n:03001500C2120014\\n:020018000E04d4\\n:02001a00CB27f2\\n:03001c00D22000ef\\n:01001f008060\\n:010020000Dd2\\n:03002100C21A0000\\n:01002400C912\\n:00000001FF',\r\n    ':0300000031FF3F8e\\n:02000300DB0020\\n:020005000600f3\\n:03000700CD0E001b\\n:01000a00787d\\n:02000b00D3021e\\n:01000d00767c\\n:01000e00F5fc\\n:01000f003Db3\\n:03001000CA16000d\\n:03001300CD0E000f\\n:01001600F1f8\\n:010017008068\\n:0100180047a0\\n:01001900C91d\\n:00000001FF',\r\n    ':02000000DB0023\\n:0300020032D007f2\\n:02000500DB011d\\n:0300070032D107ec\\n:03000a00CDD60749\\n:03000d003AD307dc\\n:02001000D30219\\n:03001200C3000028\\n:0107d0000028\\n:0107d1000027\\n:0107d2000026\\n:0107d3000025\\n:0107d4000024\\n:0107d5000023\\n:0307d6003AD0070f\\n:0107d90047d8\\n:0307da003AD1070a\\n:0107dd00809b\\n:0307de0032D3070c\\n:0107e100C94e\\n:00000001FF',\r\n    ':02000000DB0122\\n:02000200FE0Fef\\n:03000400C2000037\\n:030007003A1600a6\\n:01000a0047ae\\n:03000b00211700ba\\n:01000e007E73\\n:02000f00D3021a\\n:0100110023cb\\n:0100120005e8\\n:03001300C20E001a\\n:0100160004e5\\n:0100170007e1\\n:010018000Dda\\n:010019000Fd7\\n:01001a00766f\\n:00000001FF',\r\n    ':02000000DB0122\\n:02000200FE0Fef\\n:03000400C2000037\\n:030007002A1A00b2\\n:01000a007E77\\n:01000b0047ad\\n:03000c002A1B00ac\\n:01000f007E72\\n:02001000D30219\\n:0100120023ca\\n:0100130005e7\\n:03001400C20F0018\\n:03001700C3000023\\n:01001a0009dc\\n:01001b0001e3\\n:01001c0003e0\\n:01001d0005dd\\n:01001e0007da\\n:01001f000Bd5\\n:010020000Dd2\\n:0100210011cd\\n:0100220013ca\\n:0100230017c5\\n:00000001FF',\r\n    ':0300000031FF3F8e\\n:020003000E02eb\\n:02000500DB001e\\n:03000700320020a4\\n:01000a00797c\\n:03000b00CD5000d5\\n:02000e00DB0015\\n:030010003201209a\\n:03001300CD4400d9\\n:030016003A02208b\\n:02001900FE00e7\\n:03001b00CA3100e7\\n:02001e003EABf7\\n:02002000D30209\\n:010022007964\\n:03002300CD5000bd\\n:020026003E0199\\n:02002800D30201\\n:01002a00795c\\n:03002b00CD5000b5\\n:03002e00C3050007\\n:020031003E7619\\n:02003300D302f6\\n:010035007951\\n:03003600CD5000aa\\n:020039003E2364\\n:02003b00D302ee\\n:01003d007949\\n:03003e00CD5000a2\\n:03004100C30500f4\\n:030044003A00205f\\n:010047004F69\\n:030048003A01205a\\n:01004b009123\\n:03004c003202205d\\n:01004f00C9e7\\n:020050000605a3\\n:0100520005a8\\n:03005300C2520096\\n:010056003D6c\\n:03005700C2500094\\n:01005a00C9dc\\n:0120000000df\\n:0120010000de\\n:0120020000dd\\n:0120030000dc\\n:0120040000db\\n:00000001FF',\r\n    ':020000003E00c0\\n:020002000600f6\\n:03000400211500c3\\n:020007000E0Ddc\\n:010009007E78\\n:01000a008075\\n:01000b0047ad\\n:01000c0023d0\\n:01000d000De5\\n:03000e00C2090024\\n:010011007876\\n:02001200D30019\\n:010014007675\\n:0100150001e9\\n:0100160002e7\\n:0100170001e7\\n:0100180002e5\\n:0100190001e5\\n:01001a0001e4\\n:01001b0001e3\\n:01001c0001e2\\n:01001d0002e0\\n:01001e0002df\\n:01001f0001df\\n:0100200002dd\\n:0100210001dd\\n:00000001FF'\r\n];\r\nconst updateProgram = () => {\r\n    switch (programSelection_select.value) {\r\n        case 'own':\r\n            settingsWindow_linkerFile_textarea.value = linkerFileExamplePrograms[0];\r\n            setSettingsDependingOnProgram(true, true, false, true, '00', '01', '02', '2000');\r\n            break;\r\n        case 'bsp1':\r\n            settingsWindow_linkerFile_textarea.value = linkerFileExamplePrograms[1];\r\n            setSettingsDependingOnProgram(true, true, false, true, '00', '01', '02', '2000');\r\n            break;\r\n        case 'bsp2':\r\n            settingsWindow_linkerFile_textarea.value = linkerFileExamplePrograms[2];\r\n            setSettingsDependingOnProgram(true, true, false, true, '00', '01', '02', '2000');\r\n            break;\r\n        case 'bsp3':\r\n            settingsWindow_linkerFile_textarea.value = linkerFileExamplePrograms[3];\r\n            setSettingsDependingOnProgram(true, true, false, true, '00', '01', '02', '2000');\r\n            break;\r\n        case 'bsp4':\r\n            settingsWindow_linkerFile_textarea.value = linkerFileExamplePrograms[4];\r\n            setSettingsDependingOnProgram(true, true, false, true, '00', '01', '02', '2000');\r\n            break;\r\n        case 'bsp5':\r\n            settingsWindow_linkerFile_textarea.value = linkerFileExamplePrograms[5];\r\n            setSettingsDependingOnProgram(true, true, false, true, '00', '01', '02', 'E000');\r\n            break;\r\n        case 'bsp6':\r\n            settingsWindow_linkerFile_textarea.value = linkerFileExamplePrograms[6];\r\n            setSettingsDependingOnProgram(true, true, false, true, '00', '01', '02', 'E000');\r\n            break;\r\n        case 'bsp7':\r\n            settingsWindow_linkerFile_textarea.value = linkerFileExamplePrograms[7];\r\n            setSettingsDependingOnProgram(true, true, false, true, '00', '01', '02', 'E000');\r\n            break;\r\n        case 'bsp8':\r\n            settingsWindow_linkerFile_textarea.value = linkerFileExamplePrograms[8];\r\n            setSettingsDependingOnProgram(true, true, false, true, '00', '01', '02', 'E000');\r\n            break;\r\n        case 'bsp9':\r\n            settingsWindow_linkerFile_textarea.value = linkerFileExamplePrograms[9];\r\n            setSettingsDependingOnProgram(true, true, false, true, '00', '01', '02', '2000');\r\n            break;\r\n        case 'bsp10':\r\n            settingsWindow_linkerFile_textarea.value = linkerFileExamplePrograms[10];\r\n            setSettingsDependingOnProgram(true, true, false, false, '01', '03', '05', 'E000');\r\n            break;\r\n        case 'bsp11':\r\n            settingsWindow_linkerFile_textarea.value = linkerFileExamplePrograms[11];\r\n            setSettingsDependingOnProgram(false, true, false, true, 'A000', 'A001', 'A002', 'E000');\r\n            break;\r\n        case 'bsp12':\r\n            settingsWindow_linkerFile_textarea.value = linkerFileExamplePrograms[12];\r\n            setSettingsDependingOnProgram(true, true, false, false, '01', '03', '05', 'E000');\r\n            break;\r\n        case 'bsp13':\r\n            settingsWindow_linkerFile_textarea.value = linkerFileExamplePrograms[13];\r\n            setSettingsDependingOnProgram(true, true, true, false, '00', '01', '02', '2000');\r\n            break;\r\n        case 'bsp14':\r\n            settingsWindow_linkerFile_textarea.value = linkerFileExamplePrograms[14];\r\n            setSettingsDependingOnProgram(true, true, true, false, '00', '01', '02', '2000');\r\n            break;\r\n        case 'bsp15':\r\n            settingsWindow_linkerFile_textarea.value = linkerFileExamplePrograms[15];\r\n            setSettingsDependingOnProgram(true, true, true, false, '00', '01', '02', '2000');\r\n            break;\r\n        case 'bsp16':\r\n            settingsWindow_linkerFile_textarea.value = linkerFileExamplePrograms[16];\r\n            setSettingsDependingOnProgram(true, true, true, false, '00', '01', '02', '2000');\r\n            break;\r\n        case 'bsp17':\r\n            settingsWindow_linkerFile_textarea.value = linkerFileExamplePrograms[17];\r\n            setSettingsDependingOnProgram(true, true, true, false, '00', '01', '02', '2000');\r\n            break;\r\n        case 'bsp18':\r\n            settingsWindow_linkerFile_textarea.value = linkerFileExamplePrograms[18];\r\n            setSettingsDependingOnProgram(true, true, true, false, '00', '01', '02', '2000');\r\n            break;\r\n        case 'bsp19':\r\n            settingsWindow_linkerFile_textarea.value = linkerFileExamplePrograms[19];\r\n            setSettingsDependingOnProgram(true, false, false, true, '00', '01', '02', '2000');\r\n            break;\r\n        default:\r\n            settingsWindow_linkerFile_textarea.value = '';\r\n            break;\r\n    }\r\n};\r\nconst updateIoClasses = () => {\r\n    if (radioIoMapped_input.checked) {\r\n        IO1.ioMapped_boolean = true;\r\n        IO2.ioMapped_boolean = true;\r\n        IO3.ioMapped_boolean = true;\r\n        io1Address_textarea.maxLength = 2;\r\n        io2Address_textarea.maxLength = 2;\r\n        io3Address_textarea.maxLength = 2;\r\n    }\r\n    else {\r\n        IO1.ioMapped_boolean = false;\r\n        IO2.ioMapped_boolean = false;\r\n        IO3.ioMapped_boolean = false;\r\n        io1Address_textarea.maxLength = 4;\r\n        io2Address_textarea.maxLength = 4;\r\n        io3Address_textarea.maxLength = 4;\r\n    }\r\n    if (io1InputRadio_input.checked) {\r\n        IO1.isInput = true;\r\n        io1Arrow_div.classList.remove('ioArrowOUT');\r\n    }\r\n    else {\r\n        IO1.isInput = false;\r\n        io1Arrow_div.classList.add('ioArrowOUT');\r\n    }\r\n    if (io2InputRadio_input.checked) {\r\n        IO2.isInput = true;\r\n        io2Arrow_div.classList.remove('ioArrowOUT');\r\n    }\r\n    else {\r\n        IO2.isInput = false;\r\n        io2Arrow_div.classList.add('ioArrowOUT');\r\n    }\r\n    if (io3InputRadio_input.checked) {\r\n        IO3.isInput = true;\r\n        io3Arrow_div.classList.remove('ioArrowOUT');\r\n    }\r\n    else {\r\n        IO3.isInput = false;\r\n        io3Arrow_div.classList.add('ioArrowOUT');\r\n    }\r\n    IO1.address = convertHexToNumber(io1Address_textarea.value);\r\n    IO2.address = convertHexToNumber(io2Address_textarea.value);\r\n    IO3.address = convertHexToNumber(io3Address_textarea.value);\r\n};\r\nconst saveSettings = () => {\r\n    if (checkSettings()) {\r\n        updateIoClasses();\r\n        buttonController.reset(); //init\r\n        ROM.loadCommandsFromLinkerFile();\r\n        RAM.reset();\r\n        containerSettings_div.classList.remove('toggleDisplay');\r\n        errorWindow_div.classList.remove('displayGrid');\r\n        programStatus.settingsOpened = false;\r\n    }\r\n};\r\n/**\r\n * Custom select to work on all browsers without any differences\r\n */\r\nconst ramSelect_div = utils_getHtmlElement('ramSelect_div');\r\nconst ramSelection_p = utils_getHtmlElement('ramSelection_p');\r\nconst ramSelectOptions_div = utils_getHtmlElement('ramSelectOptions_div');\r\nconst programSelection_div = utils_getHtmlElement('programSelection_div');\r\nconst programSelection_p = utils_getHtmlElement('programSelection_p');\r\nconst programSelectionOptions_div = utils_getHtmlElement('programSelectionOptions_div');\r\nconst ramOptions = ramSelectOptions_div.children;\r\nconst programOptions = programSelectionOptions_div.children;\r\nramSelect_div.addEventListener('click', function () {\r\n    ramSelectOptions_div.classList.add('displayGrid');\r\n});\r\nprogramSelection_div.addEventListener('click', function () {\r\n    programSelectionOptions_div.classList.add('displayGrid');\r\n});\r\ndocument.addEventListener('mouseup', function () {\r\n    ramSelectOptions_div.classList.remove('displayGrid');\r\n    programSelectionOptions_div.classList.remove('displayGrid');\r\n});\r\nfor (let i = 0; i < ramOptions.length; i++) {\r\n    ramOptions[i].addEventListener('click', function () {\r\n        ramAddress_select.value = ramAddress_select.children[i].value;\r\n        changeRamAddress();\r\n        ramSelection_p.textContent = ramOptions[i].textContent;\r\n        ramSelectOptions_div.classList.remove('displayGrid');\r\n    });\r\n}\r\nfor (let i = 0; i < programOptions.length; i++) {\r\n    programOptions[i].addEventListener('click', function () {\r\n        programSelection_select.value = programSelection_select.children[i].value;\r\n        updateProgram();\r\n        programSelection_p.textContent = programOptions[i].textContent;\r\n        programSelectionOptions_div.classList.remove('displayGrid');\r\n    });\r\n}\r\n/**\r\n * EventListeners for IO radio buttons\r\n */\r\nradioIoMapped_input.addEventListener('change', updateIoClasses);\r\nradioMemoryMap_input.addEventListener('change', updateIoClasses);\r\nio1InputRadio_input.addEventListener('change', updateIoClasses);\r\nio1OutputRadio_input.addEventListener('change', updateIoClasses);\r\nio2InputRadio_input.addEventListener('change', updateIoClasses);\r\nio2OutputRadio_input.addEventListener('change', updateIoClasses);\r\nio3InputRadio_input.addEventListener('change', updateIoClasses);\r\nio3OutputRadio_input.addEventListener('change', updateIoClasses);\r\nbreakpointsCheckbox_div.addEventListener('click', function () {\r\n    breakpointsCheckbox_div.classList.toggle('breakpointsMark');\r\n    if (settingsWindow_breakpointsCheckbox_input.checked)\r\n        settingsWindow_breakpointsCheckbox_input.checked = false;\r\n    else\r\n        settingsWindow_breakpointsCheckbox_input.checked = true;\r\n});\r\n\n;// CONCATENATED MODULE: ./src/buttonController.ts\n\r\n\r\n\r\n\r\n\r\n\r\nconst doc = document.documentElement;\r\nconst play_button = utils_getHtmlElement('play_button');\r\nconst reset_button = utils_getHtmlElement('reset_button');\r\nconst singleStep_button = utils_getHtmlElement('singleStep_button');\r\nconst animationType1_button = utils_getHtmlElement('slow_button');\r\nconst animationType2_button = utils_getHtmlElement('fast_button');\r\nconst noAnimation_button = utils_getHtmlElement('noAnimation_button');\r\nconst speedSlider_input = getInputElement('speedSlider_input');\r\nconst decrease_button = utils_getHtmlElement('decrease_button');\r\nconst increase_button = utils_getHtmlElement('increase_button');\r\nconst settingsButton_button = utils_getHtmlElement('settingsButton_button');\r\nconst fullscreenButton_button = utils_getHtmlElement('fullscreenButton_button');\r\nconst io1Input_button = utils_getHtmlElement('io1Input_button');\r\nconst io2Input_button = utils_getHtmlElement('io2Input_button');\r\nconst io3Input_button = utils_getHtmlElement('io3Input_button');\r\nconst toggleTheme_button = utils_getHtmlElement('toggleTheme_button');\r\nconst info_button = utils_getHtmlElement('info_button');\r\nconst closeSettings_button = utils_getHtmlElement('closeSettings_button');\r\nclass ButtonController {\r\n    constructor() {\r\n        this.openSettings();\r\n    }\r\n    playOrPause() {\r\n        if (!programStatus.play) {\r\n            programStatus.romIsEdited = false;\r\n            if (programStatus.reset) { //only when reset is pressed(init), the program will be started anew  \r\n                programStatus.setPlay();\r\n                startAnimation();\r\n            }\r\n            programStatus.setPlay();\r\n            play_button.classList.add('pause_button', 'buttonPressed');\r\n        }\r\n        else {\r\n            programStatus.setPause();\r\n            play_button.classList.remove('pause_button', 'buttonPressed');\r\n        }\r\n    }\r\n    pause() {\r\n        programStatus.setPause();\r\n        play_button.classList.remove('pause_button', 'buttonPressed');\r\n    }\r\n    reset() {\r\n        programStatus.setReset();\r\n        play_button.classList.remove('pause_button', 'buttonPressed');\r\n        resetAnimation();\r\n    }\r\n    toggleSingleSteps() {\r\n        if (programStatus.singleSteps) {\r\n            programStatus.resetSingleSteps();\r\n            singleStep_button.classList.remove('buttonPressed', 'oneCommandPressed');\r\n            return;\r\n        }\r\n        programStatus.setSingleSteps();\r\n        singleStep_button.classList.add('buttonPressed', 'oneCommandPressed');\r\n    }\r\n    enableAnimationType_1() {\r\n        programStatus.setAnimationType_1();\r\n        animationType1_button.classList.add('buttonPressed');\r\n        animationType2_button.classList.remove('buttonPressed');\r\n        noAnimation_button.classList.remove('buttonPressed');\r\n    }\r\n    enableAnimationType_2() {\r\n        programStatus.setAnimationType_2();\r\n        animationType1_button.classList.remove('buttonPressed');\r\n        animationType2_button.classList.add('buttonPressed');\r\n        noAnimation_button.classList.remove('buttonPressed');\r\n    }\r\n    enableNoAnimation() {\r\n        programStatus.setNoAnimation();\r\n        animationType1_button.classList.remove('buttonPressed');\r\n        animationType2_button.classList.remove('buttonPressed');\r\n        noAnimation_button.classList.add('buttonPressed');\r\n    }\r\n    increaseSpeed() {\r\n        speedSlider_input.stepUp();\r\n        speedSlider_input.dispatchEvent(new Event('input'));\r\n    }\r\n    decreaseSpeed() {\r\n        speedSlider_input.stepDown();\r\n        speedSlider_input.dispatchEvent(new Event('input'));\r\n    }\r\n    openSettings() {\r\n        containerSettings_div.classList.add('toggleDisplay');\r\n        programStatus.settingsOpened = true;\r\n    }\r\n    toggleTheme() {\r\n        document.getElementsByTagName('body')[0].classList.toggle('black');\r\n        utils_getHtmlElement('toggleTheme_button').classList.toggle('light');\r\n    }\r\n    toggleFullscreen() {\r\n        if (!programStatus.fullscreenOn) {\r\n            if (doc.requestFullscreen) {\r\n                doc.requestFullscreen();\r\n            }\r\n            else if (doc.webkitRequestFullscreen) {\r\n                doc.webkitRequestFullscreen();\r\n            }\r\n            else if (doc.msRequestFullscreen) {\r\n                doc.msRequestFullscreen();\r\n            }\r\n            programStatus.fullscreenOn = true;\r\n        }\r\n        else {\r\n            if (document.exitFullscreen) {\r\n                document.exitFullscreen();\r\n            }\r\n            else if (document.webkitExitFullscreen) {\r\n                document.webkitExitFullscreen();\r\n            }\r\n            else if (document.msExitFullscreen) {\r\n                document.msExitFullscreen();\r\n            }\r\n            programStatus.fullscreenOn = false;\r\n        }\r\n    }\r\n    openInfo() {\r\n        utils_getHtmlElement('infoWindow_div').classList.toggle('displayGrid');\r\n    }\r\n}\r\nconst buttonController = new ButtonController();\r\nplay_button.addEventListener('click', buttonController.playOrPause);\r\nreset_button.addEventListener('click', buttonController.reset);\r\nsingleStep_button.addEventListener('click', buttonController.toggleSingleSteps);\r\nanimationType1_button.addEventListener('click', buttonController.enableAnimationType_1);\r\nanimationType2_button.addEventListener('click', buttonController.enableAnimationType_2);\r\nnoAnimation_button.addEventListener('click', buttonController.enableNoAnimation);\r\ndecrease_button.addEventListener('click', buttonController.decreaseSpeed);\r\nincrease_button.addEventListener('click', buttonController.increaseSpeed);\r\nsettingsButton_button.addEventListener('click', buttonController.openSettings);\r\nfullscreenButton_button.addEventListener('click', buttonController.toggleFullscreen);\r\nio1Input_button.addEventListener('click', buttonController.playOrPause);\r\nio2Input_button.addEventListener('click', buttonController.playOrPause);\r\nio3Input_button.addEventListener('click', buttonController.playOrPause);\r\ntoggleTheme_button.addEventListener('click', buttonController.toggleTheme);\r\ninfo_button.addEventListener('click', buttonController.openInfo);\r\ncloseSettings_button.addEventListener('click', saveSettings);\r\nspeedSlider_input.oninput = function () {\r\n    transferAnimator.animationSpeed = Number(speedSlider_input.value);\r\n    globalVars.IDLE_TIME = 500 - transferAnimator.animationSpeed * 30;\r\n    if (transferAnimator.animationSpeed === 5)\r\n        transferAnimator.animationSpeed = 6;\r\n    if (transferAnimator.animationSpeed === 6)\r\n        transferAnimator.animationSpeed = 12;\r\n};\r\ndocument.addEventListener('keyup', function (e) {\r\n    if (programStatus.romIsEdited) {\r\n        if (e.code === 'Space' || e.code === 'Enter') {\r\n            buttonController.playOrPause();\r\n        }\r\n        mc8Components.ROM.updateIntegerCellsFromDOM();\r\n        return;\r\n    }\r\n    if (programStatus.settingsOpened) {\r\n        if (e.code === 'Enter' || e.code === 'KeyS')\r\n            saveSettings();\r\n        return;\r\n    }\r\n    if (programStatus.ioInputDisplayed) {\r\n        if (e.code === 'Enter')\r\n            buttonController.playOrPause();\r\n        return;\r\n    }\r\n    switch (e.code) {\r\n        case 'Space':\r\n            buttonController.playOrPause();\r\n            break;\r\n        case 'KeyR':\r\n            buttonController.reset();\r\n            break;\r\n        case 'KeyT':\r\n            buttonController.toggleSingleSteps();\r\n            break;\r\n        case 'KeyY':\r\n            buttonController.enableAnimationType_1();\r\n            break;\r\n        case 'KeyZ':\r\n            buttonController.enableAnimationType_1();\r\n            break;\r\n        case 'KeyU':\r\n            buttonController.enableAnimationType_2();\r\n            break;\r\n        case 'KeyI':\r\n            buttonController.enableNoAnimation();\r\n            break;\r\n        case 'KeyS':\r\n            buttonController.openSettings();\r\n            break;\r\n        case 'KeyV':\r\n            buttonController.toggleFullscreen();\r\n            break;\r\n        case 'BracketRight':\r\n            buttonController.increaseSpeed();\r\n            break;\r\n        case 'Slash':\r\n            buttonController.decreaseSpeed();\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return;\r\n});\r\nconst pausingExecutionCheck = () => {\r\n    let check = false;\r\n    if (mc8Components.ROM.breakpointPositions[mc8Components.PC.value])\r\n        check = true;\r\n    if (programStatus.singleSteps || check) {\r\n        mc8Components.CONTROL_UNIT.updateStepDescription('Prozessor angehalten');\r\n        mc8Components.CONTROL_UNIT.stepNumber.textContent = '0';\r\n        buttonController.playOrPause();\r\n    }\r\n};\r\n\n;// CONCATENATED MODULE: ./src/animators/AluAnimator.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass AluAnimator {\r\n    constructor() {\r\n        this.movingAluElement_1 = utils_getHtmlElement('movingAlu1_h2');\r\n        this.movingAluElement_2 = utils_getHtmlElement('movingAlu2_h2');\r\n        this.xCoordinatesElement_1 = [];\r\n        this.xCoordinatesElement_2 = [];\r\n        this.yCoordinates = [];\r\n        this.initCoordinates();\r\n        this.resetMovingAluElements();\r\n        this.movingFlags = utils_getHtmlElement('movingFlags_div');\r\n    }\r\n    initCoordinates() {\r\n        const partialSteps = 40;\r\n        this.xCoordinatesElement_1 = [26];\r\n        this.xCoordinatesElement_2 = [30];\r\n        this.yCoordinates = [6];\r\n        for (let i = 1; i < partialSteps; i++) {\r\n            this.xCoordinatesElement_1.push(this.xCoordinatesElement_1[i - 1] + 2 / partialSteps);\r\n            this.xCoordinatesElement_2.push(this.xCoordinatesElement_2[i - 1] - 2 / partialSteps);\r\n            this.yCoordinates.push(this.yCoordinates[i - 1] + 4 / partialSteps);\r\n        }\r\n    }\r\n    async loadOperands(register1, register2) {\r\n        const reg1_class = mc8Components.getRegisterByName(register1);\r\n        const reg2_class = mc8Components.getRegisterByName(register2);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole den 1. Operanden');\r\n        await transferAnimator.transfer(register1, 'ALU1', reg1_class.value);\r\n        await registerAnimator.registerUpdate('ALU1', reg1_class.value);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole den 2. Operanden');\r\n        await transferAnimator.transfer(register2, 'ALU2', reg2_class.value);\r\n        await registerAnimator.registerUpdate('ALU2', reg2_class.value);\r\n    }\r\n    async basicAnimation(result, twoMovingAluElements, displayCarryArrow, nameOfRegisterToSave) {\r\n        if (programStatus.animationType_1 || programStatus.animationType_2) {\r\n            await this.moveAluElements(result, twoMovingAluElements, displayCarryArrow);\r\n        }\r\n        else { //noAnim\r\n            await registerAnimator.registerUpdate('ALUOUT', result);\r\n            mc8Components.ALU.operandRegister1.htmlElement.textContent = '';\r\n            mc8Components.ALU.operandRegister2.htmlElement.textContent = '';\r\n        }\r\n        try {\r\n            await controlUnitAnimator.stepDescriptionUpdate('Setze die Flags');\r\n            await this.animateSetFlags();\r\n            if (nameOfRegisterToSave)\r\n                await controlUnitAnimator.stepDescriptionUpdate('Speichere das Ergebnis');\r\n        }\r\n        finally {\r\n            mc8Components.ALU.resultRegister.htmlElement.classList.remove('yellowBg', 'borderBox');\r\n            mc8Components.ALU.resultRegister.htmlElement.textContent = '';\r\n        }\r\n        if (nameOfRegisterToSave !== '') {\r\n            await transferAnimator.transfer('ALUOUT', nameOfRegisterToSave, result);\r\n            await registerAnimator.registerUpdate(nameOfRegisterToSave, result);\r\n        }\r\n    }\r\n    async moveAluElements(result, twoMovingAluElements, displayCarryArrow) {\r\n        this.displayMovingAluElements(twoMovingAluElements);\r\n        try {\r\n            if (displayCarryArrow)\r\n                await arrowAnimator.displayAluCarryArrow();\r\n            await sleepForIDLETIME();\r\n            for (let i = 0; i < this.xCoordinatesElement_1.length; i++) {\r\n                this.updateMovingAlu1ElementPosition(this.xCoordinatesElement_1[i], this.yCoordinates[i]);\r\n                this.updateMovingAlu2ElementPosition(this.xCoordinatesElement_2[i], this.yCoordinates[i]);\r\n                await sleepBetweenFrames();\r\n            }\r\n            this.resetMovingAluElements();\r\n            mc8Components.ALU.resultRegister.htmlElement.classList.add('borderBox');\r\n            await registerAnimator.registerUpdate('ALUOUT', result);\r\n        }\r\n        finally {\r\n            this.resetMovingAluElements();\r\n        }\r\n        mc8Components.ALU.resultRegister.htmlElement.classList.add('yellowBg');\r\n    }\r\n    displayMovingAluElements(twoMovingAluElements) {\r\n        this.movingAluElement_1.textContent = mc8Components.ALU.operandRegister1.htmlElement.textContent;\r\n        this.movingAluElement_2.textContent = mc8Components.ALU.operandRegister2.htmlElement.textContent;\r\n        this.movingAluElement_1.classList.add('displayGrid');\r\n        if (twoMovingAluElements)\r\n            this.movingAluElement_2.classList.add('displayGrid');\r\n        this.removeAluOperandRegisterText();\r\n    }\r\n    resetMovingAluElements() {\r\n        this.movingAluElement_1.classList.remove('displayGrid');\r\n        this.movingAluElement_2.classList.remove('displayGrid');\r\n        this.movingAluElement_1.style.top = `${100 / animationWindow.sectionsCountHeight * 6}%`;\r\n        this.movingAluElement_1.style.left = `${100 / animationWindow.sectionsCountWidth * 26}%`;\r\n        this.movingAluElement_2.style.top = `${100 / animationWindow.sectionsCountHeight * 6}%`;\r\n        this.movingAluElement_2.style.left = `${100 / animationWindow.sectionsCountWidth * 30}%`;\r\n    }\r\n    removeAluOperandRegisterText() {\r\n        mc8Components.ALU.operandRegister1.htmlElement.textContent = '';\r\n        mc8Components.ALU.operandRegister2.htmlElement.textContent = '';\r\n    }\r\n    updateMovingAlu1ElementPosition(xCoordinate, yCoordinate) {\r\n        this.movingAluElement_1.style.top = `${100 / animationWindow.sectionsCountHeight * yCoordinate}%`;\r\n        this.movingAluElement_1.style.left = `${100 / animationWindow.sectionsCountWidth * xCoordinate}%`;\r\n    }\r\n    updateMovingAlu2ElementPosition(xCoordinate, yCoordinate) {\r\n        this.movingAluElement_2.style.top = `${100 / animationWindow.sectionsCountHeight * yCoordinate}%`;\r\n        this.movingAluElement_2.style.left = `${100 / animationWindow.sectionsCountWidth * xCoordinate}%`;\r\n    }\r\n    async animateSetFlags() {\r\n        if (!programStatus.noAnimation) {\r\n            await arrowAnimator.displaySetFlagsArrow();\r\n            this.movingFlags.children[0].textContent = mc8Components.FLAGS.cFlag;\r\n            this.movingFlags.children[1].textContent = mc8Components.FLAGS.pFlag;\r\n            this.movingFlags.children[2].textContent = mc8Components.FLAGS.sFlag;\r\n            this.movingFlags.children[3].textContent = mc8Components.FLAGS.zFlag;\r\n            this.movingFlags.classList.add('displayGrid');\r\n            try {\r\n                await sleepForIDLETIME();\r\n                for (let i = 0; i < 21; i++) {\r\n                    this.movingFlags.style.top = `${100 / 32 * (8 - i / 20)}%`;\r\n                    await sleepBetweenFrames();\r\n                }\r\n                await sleepForIDLETIME();\r\n            }\r\n            finally {\r\n                this.movingFlags.classList.remove('displayGrid');\r\n                this.movingFlags.style.top = `${100 / 32 * 8}%`;\r\n            }\r\n        }\r\n        mc8Components.FLAGS.updateDOM();\r\n    }\r\n}\r\nconst aluAnimator = new AluAnimator();\r\n\n;// CONCATENATED MODULE: ./src/animators/CommandAnimator.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst movingAlu2 = utils_getHtmlElement('movingAlu2_h2');\r\nconst animateLoadAddressBytesInZr = async () => {\r\n    await controlUnitAnimator.stepDescriptionUpdate('Hole das niederwertige Adressbyte');\r\n    await transferAnimator.readFromMemoryInRegister('PC', 'ZR_lo');\r\n    await registerAnimator.increasePcByOne();\r\n    await controlUnitAnimator.stepDescriptionUpdate('Hole das höherwertige Adressbyte');\r\n    await transferAnimator.readFromMemoryInRegister('PC', 'ZR_hi');\r\n    await registerAnimator.increasePcByOne();\r\n};\r\nclass CommandAnimator {\r\n    constructor() { }\r\n    async nop() {\r\n        if (programStatus.noAnimation)\r\n            await sleepForNOANIMATIONIDLETIME();\r\n        else\r\n            await sleepForIDLETIME();\r\n        pausingExecutionCheck();\r\n    }\r\n    async halt() {\r\n        mc8Components.CONTROL_UNIT.updateStepDescription('Prozessor angehalten');\r\n        mc8Components.CONTROL_UNIT.stepNumber.textContent = '0';\r\n        buttonController.pause();\r\n        pausingExecutionCheck();\r\n    }\r\n    async movAdat_8() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole den Parameter');\r\n        await transferAnimator.readFromMemoryInRegister('PC', 'A');\r\n        await registerAnimator.increasePcByOne();\r\n        pausingExecutionCheck();\r\n        return true;\r\n    }\r\n    async movBdat_8() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole den Parameter');\r\n        await transferAnimator.readFromMemoryInRegister('PC', 'B');\r\n        await registerAnimator.increasePcByOne();\r\n        pausingExecutionCheck();\r\n        return true;\r\n    }\r\n    async movCdat_8() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole den Parameter');\r\n        await transferAnimator.readFromMemoryInRegister('PC', 'C');\r\n        await registerAnimator.increasePcByOne();\r\n        pausingExecutionCheck();\r\n        return true;\r\n    }\r\n    async twoByteIX() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole das 2. Byte des Befehls');\r\n        await transferAnimator.readFromMemoryInRegister('PC', 'IR');\r\n        await registerAnimator.increasePcByOne();\r\n        await controlUnitAnimator.stepDescriptionUpdate('Erkenne den Befehl');\r\n        await addYellowBackgroundTo(mc8Components.CONTROL_UNIT.IR.htmlElement);\r\n        await arrowAnimator.displayIrArrow();\r\n        if (mc8Components.CONTROL_UNIT.IR.value === 0b00100001) {\r\n            mc8Components.CONTROL_UNIT.assemblerCommand.textContent = 'MOV IX, dat_16';\r\n            if (!programStatus.noAnimation)\r\n                await sleepForIDLETIME();\r\n            await controlUnitAnimator.stepDescriptionUpdate('Hole das niederwertige Byte');\r\n            await transferAnimator.readFromMemoryInRegister('PC', 'IX_lo');\r\n            await registerAnimator.increasePcByOne();\r\n            await controlUnitAnimator.stepDescriptionUpdate('Hole das höherwertige Byte');\r\n            await transferAnimator.readFromMemoryInRegister('PC', 'IX_hi');\r\n            await registerAnimator.increasePcByOne();\r\n        }\r\n        else if (mc8Components.CONTROL_UNIT.IR.value === 0b00101010) {\r\n            mc8Components.CONTROL_UNIT.assemblerCommand.textContent = 'MOV IX, label';\r\n            await animateLoadAddressBytesInZr();\r\n            await controlUnitAnimator.stepDescriptionUpdate('Hole das niederwertige Byte');\r\n            await transferAnimator.readFromMemoryInRegister('ZR', 'IX_lo');\r\n            await controlUnitAnimator.stepDescriptionUpdate('Erhöhe die Adresse um 1');\r\n            await arrowAnimator.displayRegisterArrow('ZR');\r\n            await registerAnimator.registerUpdate('ZR', mc8Components.ZR.value + 1);\r\n            await controlUnitAnimator.stepDescriptionUpdate('Hole das höherwertige Byte');\r\n            await transferAnimator.readFromMemoryInRegister('ZR', 'IX_hi');\r\n        }\r\n        else if (mc8Components.CONTROL_UNIT.IR.value === 0b00100010) {\r\n            mc8Components.CONTROL_UNIT.assemblerCommand.textContent = 'MOV label, IX';\r\n            await animateLoadAddressBytesInZr();\r\n            await controlUnitAnimator.stepDescriptionUpdate('Schreibe das niederwertige Byte');\r\n            await transferAnimator.writeToMemoryFromRegister('ZR', 'IX_lo');\r\n            await controlUnitAnimator.stepDescriptionUpdate('Erhöhe die Adresse um 1');\r\n            await arrowAnimator.displayRegisterArrow('ZR');\r\n            await registerAnimator.registerUpdate('ZR', mc8Components.ZR.value + 1);\r\n            await controlUnitAnimator.stepDescriptionUpdate('Schreibe das höherwertige Byte');\r\n            await transferAnimator.writeToMemoryFromRegister('ZR', 'IX_hi');\r\n        }\r\n        else if (mc8Components.CONTROL_UNIT.IR.value === 0b00100011) {\r\n            mc8Components.CONTROL_UNIT.assemblerCommand.textContent = 'INC IX';\r\n            await controlUnitAnimator.stepDescriptionUpdate('Erhöhe die Adresse um 1');\r\n            await arrowAnimator.displayRegisterArrow('IX');\r\n            await registerAnimator.registerUpdate('IX', mc8Components.IX.value + 1);\r\n        }\r\n        else if (mc8Components.CONTROL_UNIT.IR.value === 0b00101011) {\r\n            mc8Components.CONTROL_UNIT.assemblerCommand.textContent = 'DEC IX';\r\n            await controlUnitAnimator.stepDescriptionUpdate('Verringere die Adresse um 1');\r\n            await arrowAnimator.displayRegisterArrow('IX');\r\n            await registerAnimator.registerUpdate('IX', mc8Components.IX.value - 1);\r\n        }\r\n        else if (mc8Components.CONTROL_UNIT.IR.value === 0b11101001) {\r\n            mc8Components.CONTROL_UNIT.assemblerCommand.textContent = 'JP [IX]';\r\n            await controlUnitAnimator.stepDescriptionUpdate('Lade den Programmzähler');\r\n            await transferAnimator.transfer('IX', 'PC', mc8Components.IX.value);\r\n            await registerAnimator.registerUpdate('PC', mc8Components.IX.value);\r\n        }\r\n        else {\r\n            await addYellowBackgroundTo(mc8Components.CONTROL_UNIT.IR.htmlElement);\r\n            await arrowAnimator.displayIrArrow();\r\n            mc8Components.CONTROL_UNIT.assemblerCommand.textContent = 'Befehl Unbekannt';\r\n            throw Error('Unknown command');\r\n        }\r\n        pausingExecutionCheck();\r\n        return true;\r\n    }\r\n    async movHLdat_16() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole das niederwertige Byte');\r\n        await transferAnimator.readFromMemoryInRegister('PC', 'HL_lo');\r\n        await registerAnimator.increasePcByOne();\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole das höherwertige Byte');\r\n        await transferAnimator.readFromMemoryInRegister('PC', 'HL_hi');\r\n        await registerAnimator.increasePcByOne();\r\n        pausingExecutionCheck();\r\n    }\r\n    async movSPdat_16() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole das niederwertige Byte');\r\n        await transferAnimator.readFromMemoryInRegister('PC', 'SP_lo');\r\n        await registerAnimator.increasePcByOne();\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole das höherwertige Byte');\r\n        await transferAnimator.readFromMemoryInRegister('PC', 'SP_hi');\r\n        await registerAnimator.increasePcByOne();\r\n        pausingExecutionCheck();\r\n    }\r\n    async movAB() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Kopiere die Daten');\r\n        await transferAnimator.transfer('B', 'A', mc8Components.B.value);\r\n        await registerAnimator.registerUpdate('A', mc8Components.B.value);\r\n        pausingExecutionCheck();\r\n    }\r\n    async movAC() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Kopiere die Daten');\r\n        await transferAnimator.transfer('C', 'A', mc8Components.C.value);\r\n        await registerAnimator.registerUpdate('A', mc8Components.C.value);\r\n        pausingExecutionCheck();\r\n    }\r\n    async movBA() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Kopiere die Daten');\r\n        await transferAnimator.transfer('A', 'B', mc8Components.A.value);\r\n        await registerAnimator.registerUpdate('B', mc8Components.A.value);\r\n        pausingExecutionCheck();\r\n    }\r\n    async movBC() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Kopiere die Daten');\r\n        await transferAnimator.transfer('C', 'B', mc8Components.C.value);\r\n        await registerAnimator.registerUpdate('B', mc8Components.C.value);\r\n        pausingExecutionCheck();\r\n    }\r\n    async movCA() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Kopiere die Daten');\r\n        await transferAnimator.transfer('A', 'C', mc8Components.A.value);\r\n        await registerAnimator.registerUpdate('C', mc8Components.A.value);\r\n        pausingExecutionCheck();\r\n    }\r\n    async movCB() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Kopiere die Daten');\r\n        await transferAnimator.transfer('B', 'C', mc8Components.B.value);\r\n        await registerAnimator.registerUpdate('C', mc8Components.B.value);\r\n        pausingExecutionCheck();\r\n    }\r\n    async movALabel() {\r\n        await animateLoadAddressBytesInZr();\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole die Daten');\r\n        await transferAnimator.readFromMemoryInRegister('ZR', 'A');\r\n        pausingExecutionCheck();\r\n    }\r\n    async movLabelA() {\r\n        await animateLoadAddressBytesInZr();\r\n        await controlUnitAnimator.stepDescriptionUpdate('Schreibe die Daten');\r\n        await transferAnimator.writeToMemoryFromRegister('ZR', 'A');\r\n        pausingExecutionCheck();\r\n    }\r\n    async movHlLabel() {\r\n        await animateLoadAddressBytesInZr();\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole das niederwertige Byte');\r\n        await transferAnimator.readFromMemoryInRegister('ZR', 'HL_lo');\r\n        await controlUnitAnimator.stepDescriptionUpdate('Erhöhe die Adresse um 1');\r\n        await arrowAnimator.displayRegisterArrow('ZR');\r\n        await registerAnimator.registerUpdate('ZR', mc8Components.ZR.value + 1);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole das höherwertige Byte');\r\n        await transferAnimator.readFromMemoryInRegister('ZR', 'HL_hi');\r\n        pausingExecutionCheck();\r\n    }\r\n    async movLabelHl() {\r\n        await animateLoadAddressBytesInZr();\r\n        await controlUnitAnimator.stepDescriptionUpdate('Schreibe das niederwertige Byte');\r\n        await transferAnimator.writeToMemoryFromRegister('ZR', 'HL_lo');\r\n        await controlUnitAnimator.stepDescriptionUpdate('Erhöhe die Adresse um 1');\r\n        await arrowAnimator.displayRegisterArrow('ZR');\r\n        await registerAnimator.registerUpdate('ZR', mc8Components.ZR.value + 1);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Schreibe das höherwertige Byte');\r\n        await transferAnimator.writeToMemoryFromRegister('ZR', 'HL_hi');\r\n        pausingExecutionCheck();\r\n    }\r\n    async movAHl() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole die Daten');\r\n        await transferAnimator.readFromMemoryInRegister('HL', 'A');\r\n        pausingExecutionCheck();\r\n    }\r\n    async movHlA() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Schreibe die Daten');\r\n        await transferAnimator.writeToMemoryFromRegister('HL', 'A');\r\n        pausingExecutionCheck();\r\n    }\r\n    async push() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Erhöhe den Stackpointer um 1');\r\n        await arrowAnimator.displayRegisterArrow('SP');\r\n        await registerAnimator.registerUpdate('SP', mc8Components.SP.value - 1);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Schreibe den Akku');\r\n        await transferAnimator.writeToMemoryFromRegister('SP', 'A');\r\n        await controlUnitAnimator.stepDescriptionUpdate('Erhöhe den Stackpointer um 1');\r\n        await arrowAnimator.displayRegisterArrow('SP');\r\n        await registerAnimator.registerUpdate('SP', mc8Components.SP.value - 1);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Schreibe die Flags');\r\n        await transferAnimator.writeToMemoryFromRegister('SP', 'FLAGS');\r\n        pausingExecutionCheck();\r\n    }\r\n    async pop() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole die Flags');\r\n        await transferAnimator.readFromMemoryInRegister('SP', 'FLAGS');\r\n        await controlUnitAnimator.stepDescriptionUpdate('Verringer den Stackpointer um 1');\r\n        await arrowAnimator.displayRegisterArrow('SP');\r\n        await registerAnimator.registerUpdate('SP', mc8Components.SP.value + 1);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole den Akku');\r\n        await transferAnimator.readFromMemoryInRegister('SP', 'A');\r\n        await controlUnitAnimator.stepDescriptionUpdate('Verringer den Stackpointer um 1');\r\n        await arrowAnimator.displayRegisterArrow('SP');\r\n        await registerAnimator.registerUpdate('SP', mc8Components.SP.value + 1);\r\n        pausingExecutionCheck();\r\n    }\r\n    async inA() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole das Adressbyte');\r\n        await transferAnimator.readFromMemoryInRegister('PC', 'ZR_lo');\r\n        await registerAnimator.increasePcByOne();\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole die Daten');\r\n        await transferAnimator.readFromIo();\r\n        pausingExecutionCheck();\r\n    }\r\n    async outA() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole das Adressbyte');\r\n        await transferAnimator.readFromMemoryInRegister('PC', 'ZR_lo');\r\n        await registerAnimator.increasePcByOne();\r\n        await controlUnitAnimator.stepDescriptionUpdate('Schreibe die Daten');\r\n        await transferAnimator.writeToIo();\r\n        pausingExecutionCheck();\r\n    }\r\n    async incA() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole den Operanden');\r\n        await transferAnimator.transfer('A', 'ALU1', mc8Components.A.value);\r\n        await registerAnimator.registerUpdate('ALU1', mc8Components.A.value);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Erhöhe den Operanden um 1');\r\n        const result = mc8Components.ALU.incBinary(mc8Components.A.value);\r\n        mc8Components.ALU.operandRegister2.update(1);\r\n        movingAlu2.classList.remove('yellowBg');\r\n        await aluAnimator.basicAnimation(result, true, false, 'A');\r\n        movingAlu2.classList.add('yellowBg');\r\n        pausingExecutionCheck();\r\n    }\r\n    async incB() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole den Operanden');\r\n        await transferAnimator.transfer('B', 'ALU1', mc8Components.B.value);\r\n        await registerAnimator.registerUpdate('ALU1', mc8Components.B.value);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Erhöhe den Operanden um 1');\r\n        const result = mc8Components.ALU.incBinary(mc8Components.B.value);\r\n        mc8Components.ALU.operandRegister2.update(1);\r\n        movingAlu2.classList.remove('yellowBg');\r\n        await aluAnimator.basicAnimation(result, true, false, 'B');\r\n        movingAlu2.classList.add('yellowBg');\r\n        pausingExecutionCheck();\r\n    }\r\n    async incC() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole den Operanden');\r\n        await transferAnimator.transfer('C', 'ALU1', mc8Components.C.value);\r\n        await registerAnimator.registerUpdate('ALU1', mc8Components.C.value);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Erhöhe den Operanden um 1');\r\n        const result = mc8Components.ALU.incBinary(mc8Components.C.value);\r\n        mc8Components.ALU.operandRegister2.update(1);\r\n        movingAlu2.classList.remove('yellowBg');\r\n        await aluAnimator.basicAnimation(result, true, false, 'C');\r\n        movingAlu2.classList.add('yellowBg');\r\n        pausingExecutionCheck();\r\n    }\r\n    async incHl() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Erhöhe die Adresse um 1');\r\n        await arrowAnimator.displayRegisterArrow('HL');\r\n        await registerAnimator.registerUpdate('HL', mc8Components.HL.value + 1);\r\n        pausingExecutionCheck();\r\n    }\r\n    async decA() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole den Operanden');\r\n        await transferAnimator.transfer('A', 'ALU1', mc8Components.A.value);\r\n        await registerAnimator.registerUpdate('ALU1', mc8Components.A.value);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Verringere den Operanden um 1');\r\n        const result = mc8Components.ALU.decBinary(mc8Components.A.value);\r\n        mc8Components.ALU.operandRegister2.update(1);\r\n        movingAlu2.classList.remove('yellowBg');\r\n        await aluAnimator.basicAnimation(result, true, false, 'A');\r\n        movingAlu2.classList.add('yellowBg');\r\n        pausingExecutionCheck();\r\n    }\r\n    async decB() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole den Operanden');\r\n        await transferAnimator.transfer('B', 'ALU1', mc8Components.B.value);\r\n        await registerAnimator.registerUpdate('ALU1', mc8Components.B.value);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Verringere den Operanden um 1');\r\n        const result = mc8Components.ALU.decBinary(mc8Components.B.value);\r\n        mc8Components.ALU.operandRegister2.update(1);\r\n        movingAlu2.classList.remove('yellowBg');\r\n        await aluAnimator.basicAnimation(result, true, false, 'B');\r\n        movingAlu2.classList.add('yellowBg');\r\n        pausingExecutionCheck();\r\n    }\r\n    async decC() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole den Operanden');\r\n        await transferAnimator.transfer('C', 'ALU1', mc8Components.C.value);\r\n        await registerAnimator.registerUpdate('ALU1', mc8Components.C.value);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Verringere den Operanden um 1');\r\n        const result = mc8Components.ALU.decBinary(mc8Components.C.value);\r\n        mc8Components.ALU.operandRegister2.update(1);\r\n        movingAlu2.classList.remove('yellowBg');\r\n        await aluAnimator.basicAnimation(result, true, false, 'C');\r\n        movingAlu2.classList.add('yellowBg');\r\n        pausingExecutionCheck();\r\n    }\r\n    async decHl() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Verringere die Adresse um 1');\r\n        await arrowAnimator.displayRegisterArrow('HL');\r\n        await registerAnimator.registerUpdate('HL', mc8Components.HL.value - 1);\r\n        pausingExecutionCheck();\r\n    }\r\n    async addA() {\r\n        await aluAnimator.loadOperands('A', 'A');\r\n        await controlUnitAnimator.stepDescriptionUpdate('Addiere die Operanden');\r\n        const result = mc8Components.ALU.addBinary(mc8Components.A.value, mc8Components.A.value, false);\r\n        await aluAnimator.basicAnimation(result, true, false, 'A');\r\n        pausingExecutionCheck();\r\n    }\r\n    async addB() {\r\n        await aluAnimator.loadOperands('A', 'B');\r\n        await controlUnitAnimator.stepDescriptionUpdate('Addiere die Operanden');\r\n        const result = mc8Components.ALU.addBinary(mc8Components.A.value, mc8Components.B.value, false);\r\n        await aluAnimator.basicAnimation(result, true, false, 'A');\r\n        pausingExecutionCheck();\r\n    }\r\n    async addC() {\r\n        await aluAnimator.loadOperands('A', 'C');\r\n        await controlUnitAnimator.stepDescriptionUpdate('Addiere die Operanden');\r\n        const result = mc8Components.ALU.addBinary(mc8Components.A.value, mc8Components.C.value, false);\r\n        await aluAnimator.basicAnimation(result, true, false, 'A');\r\n        pausingExecutionCheck();\r\n    }\r\n    async addDat_8() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole den 1. Operanden');\r\n        await transferAnimator.transfer('A', 'ALU1', mc8Components.A.value);\r\n        await registerAnimator.registerUpdate('ALU1', mc8Components.A.value);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole den 2. Operanden');\r\n        await transferAnimator.readFromMemoryInRegister('PC', 'ALU2');\r\n        await registerAnimator.increasePcByOne();\r\n        await controlUnitAnimator.stepDescriptionUpdate('Addiere die Operanden');\r\n        const result = mc8Components.ALU.addBinary(mc8Components.A.value, mc8Components.ALU.operandRegister2.value, false);\r\n        await aluAnimator.basicAnimation(result, true, false, 'A');\r\n        pausingExecutionCheck();\r\n    }\r\n    async addHlBc() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole das L-Register (HL_LO)');\r\n        await transferAnimator.transfer('HL_lo', 'ALU1', mc8Components.HL.loValue);\r\n        await registerAnimator.registerUpdate('ALU1', mc8Components.HL.loValue);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole das C-Register');\r\n        await transferAnimator.transfer('C', 'ALU2', mc8Components.C.value);\r\n        await registerAnimator.registerUpdate('ALU2', mc8Components.C.value);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Addiere die Operanden');\r\n        let result = mc8Components.ALU.addBinary(mc8Components.HL.loValue, mc8Components.C.value, false);\r\n        await aluAnimator.basicAnimation(result, true, false, 'HL_lo');\r\n        // await aluAnimator.hlBcAddition(result, true);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole das H-Register (HL_HI)');\r\n        await transferAnimator.transfer('HL_hi', 'ALU1', mc8Components.HL.hiValue);\r\n        await registerAnimator.registerUpdate('ALU1', mc8Components.HL.hiValue);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole das B-Register');\r\n        await transferAnimator.transfer('B', 'ALU2', mc8Components.B.value);\r\n        await registerAnimator.registerUpdate('ALU2', mc8Components.B.value);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Addiere die Operanden');\r\n        result = mc8Components.ALU.addBinary(mc8Components.HL.hiValue, mc8Components.B.value + mc8Components.FLAGS.cFlag, false);\r\n        await aluAnimator.basicAnimation(result, true, true, 'HL_hi');\r\n        // await aluAnimator.hlBcAddition(result, false);\r\n        pausingExecutionCheck();\r\n    }\r\n    async subA() {\r\n        await aluAnimator.loadOperands('A', 'A');\r\n        await controlUnitAnimator.stepDescriptionUpdate('Subtrahiere die Operanden');\r\n        const result = mc8Components.ALU.addBinary(mc8Components.A.value, mc8Components.A.value, true);\r\n        await aluAnimator.basicAnimation(result, true, false, 'A');\r\n        pausingExecutionCheck();\r\n    }\r\n    async subB() {\r\n        await aluAnimator.loadOperands('A', 'B');\r\n        await controlUnitAnimator.stepDescriptionUpdate('Subtrahiere die Operanden');\r\n        const result = mc8Components.ALU.addBinary(mc8Components.A.value, mc8Components.B.value, true);\r\n        await aluAnimator.basicAnimation(result, true, false, 'A');\r\n        pausingExecutionCheck();\r\n    }\r\n    async subC() {\r\n        await aluAnimator.loadOperands('A', 'C');\r\n        await controlUnitAnimator.stepDescriptionUpdate('Subtrahiere die Operanden');\r\n        const result = mc8Components.ALU.addBinary(mc8Components.A.value, mc8Components.C.value, true);\r\n        await aluAnimator.basicAnimation(result, true, false, 'A');\r\n        pausingExecutionCheck();\r\n    }\r\n    async subDat_8() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole den 1. Operanden');\r\n        await transferAnimator.transfer('A', 'ALU1', mc8Components.A.value);\r\n        await registerAnimator.registerUpdate('ALU1', mc8Components.A.value);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole den 2. Operanden');\r\n        await transferAnimator.readFromMemoryInRegister('PC', 'ALU2');\r\n        await registerAnimator.increasePcByOne();\r\n        await controlUnitAnimator.stepDescriptionUpdate('Subtrahiere die Operanden');\r\n        const result = mc8Components.ALU.addBinary(mc8Components.A.value, mc8Components.ALU.operandRegister2.value, true);\r\n        await aluAnimator.basicAnimation(result, true, false, 'A');\r\n        pausingExecutionCheck();\r\n    }\r\n    async andA() {\r\n        await aluAnimator.loadOperands('A', 'A');\r\n        await controlUnitAnimator.stepDescriptionUpdate('OP1 AND OP2');\r\n        const result = mc8Components.ALU.andBinary(mc8Components.A.value, mc8Components.A.value);\r\n        await aluAnimator.basicAnimation(result, true, false, 'A');\r\n        pausingExecutionCheck();\r\n    }\r\n    async andB() {\r\n        await aluAnimator.loadOperands('A', 'B');\r\n        await controlUnitAnimator.stepDescriptionUpdate('OP1 AND OP2');\r\n        const result = mc8Components.ALU.andBinary(mc8Components.A.value, mc8Components.B.value);\r\n        await aluAnimator.basicAnimation(result, true, false, 'A');\r\n        pausingExecutionCheck();\r\n    }\r\n    async andC() {\r\n        await aluAnimator.loadOperands('A', 'C');\r\n        await controlUnitAnimator.stepDescriptionUpdate('OP1 AND OP2');\r\n        const result = mc8Components.ALU.andBinary(mc8Components.A.value, mc8Components.C.value);\r\n        await aluAnimator.basicAnimation(result, true, false, 'A');\r\n        pausingExecutionCheck();\r\n    }\r\n    async andDat_8() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole den 1. Operanden');\r\n        await transferAnimator.transfer('A', 'ALU1', mc8Components.A.value);\r\n        await registerAnimator.registerUpdate('ALU1', mc8Components.A.value);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole den 2. Operanden');\r\n        await transferAnimator.readFromMemoryInRegister('PC', 'ALU2');\r\n        await registerAnimator.increasePcByOne();\r\n        await controlUnitAnimator.stepDescriptionUpdate('OP1 AND OP2');\r\n        const result = mc8Components.ALU.andBinary(mc8Components.A.value, mc8Components.ALU.operandRegister2.value);\r\n        await aluAnimator.basicAnimation(result, true, false, 'A');\r\n        pausingExecutionCheck();\r\n    }\r\n    async orA() {\r\n        await aluAnimator.loadOperands('A', 'A');\r\n        await controlUnitAnimator.stepDescriptionUpdate('OP1 OR OP2');\r\n        const result = mc8Components.ALU.orBinary(mc8Components.ALU.operandRegister1.value, mc8Components.ALU.operandRegister2.value);\r\n        await aluAnimator.basicAnimation(result, true, false, 'A');\r\n        pausingExecutionCheck();\r\n    }\r\n    async orB() {\r\n        await aluAnimator.loadOperands('A', 'B');\r\n        await controlUnitAnimator.stepDescriptionUpdate('OP1 OR OP2');\r\n        const result = mc8Components.ALU.orBinary(mc8Components.ALU.operandRegister1.value, mc8Components.ALU.operandRegister2.value);\r\n        await aluAnimator.basicAnimation(result, true, false, 'A');\r\n        pausingExecutionCheck();\r\n    }\r\n    async orC() {\r\n        await aluAnimator.loadOperands('A', 'C');\r\n        await controlUnitAnimator.stepDescriptionUpdate('OP1 OR OP2');\r\n        const result = mc8Components.ALU.orBinary(mc8Components.ALU.operandRegister1.value, mc8Components.ALU.operandRegister2.value);\r\n        await aluAnimator.basicAnimation(result, true, false, 'A');\r\n        pausingExecutionCheck();\r\n    }\r\n    async orDat_8() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole den 1. Operanden');\r\n        await transferAnimator.transfer('A', 'ALU1', mc8Components.A.value);\r\n        await registerAnimator.registerUpdate('ALU1', mc8Components.A.value);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole den 2. Operanden');\r\n        await transferAnimator.readFromMemoryInRegister('PC', 'ALU2');\r\n        await registerAnimator.increasePcByOne();\r\n        await controlUnitAnimator.stepDescriptionUpdate('OP1 OR OP2');\r\n        const result = mc8Components.ALU.orBinary(mc8Components.ALU.operandRegister1.value, mc8Components.ALU.operandRegister2.value);\r\n        await aluAnimator.basicAnimation(result, true, false, 'A');\r\n        pausingExecutionCheck();\r\n    }\r\n    async xorA() {\r\n        await aluAnimator.loadOperands('A', 'A');\r\n        await controlUnitAnimator.stepDescriptionUpdate('OP1 XOR OP2');\r\n        const result = mc8Components.ALU.xorBinary(mc8Components.A.value, mc8Components.A.value);\r\n        await aluAnimator.basicAnimation(result, true, false, 'A');\r\n        pausingExecutionCheck();\r\n    }\r\n    async xorB() {\r\n        await aluAnimator.loadOperands('A', 'B');\r\n        await controlUnitAnimator.stepDescriptionUpdate('OP1 XOR OP2');\r\n        const result = mc8Components.ALU.xorBinary(mc8Components.A.value, mc8Components.B.value);\r\n        await aluAnimator.basicAnimation(result, true, false, 'A');\r\n        pausingExecutionCheck();\r\n    }\r\n    async xorC() {\r\n        await aluAnimator.loadOperands('A', 'C');\r\n        await controlUnitAnimator.stepDescriptionUpdate('OP1 XOR OP2');\r\n        const result = mc8Components.ALU.xorBinary(mc8Components.A.value, mc8Components.C.value);\r\n        await aluAnimator.basicAnimation(result, true, false, 'A');\r\n        pausingExecutionCheck();\r\n    }\r\n    async xorDat_8() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole den 1. Operanden');\r\n        await transferAnimator.transfer('A', 'ALU1', mc8Components.A.value);\r\n        await registerAnimator.registerUpdate('ALU1', mc8Components.A.value);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole den 2. Operanden');\r\n        await transferAnimator.readFromMemoryInRegister('PC', 'ALU2');\r\n        await registerAnimator.increasePcByOne();\r\n        await controlUnitAnimator.stepDescriptionUpdate('OP1 OR OP2');\r\n        const result = mc8Components.ALU.xorBinary(mc8Components.ALU.operandRegister1.value, mc8Components.ALU.operandRegister2.value);\r\n        await aluAnimator.basicAnimation(result, true, false, 'A');\r\n        pausingExecutionCheck();\r\n    }\r\n    async twoByteShift() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole das 2. Byte des Befehls');\r\n        await transferAnimator.readFromMemoryInRegister('PC', 'IR');\r\n        await registerAnimator.increasePcByOne();\r\n        await controlUnitAnimator.stepDescriptionUpdate('Erkenne den Befehl');\r\n        await addYellowBackgroundTo(mc8Components.CONTROL_UNIT.IR.htmlElement);\r\n        if (mc8Components.CONTROL_UNIT.IR.value === 0b00100111) {\r\n            await arrowAnimator.displayIrArrow();\r\n            mc8Components.CONTROL_UNIT.assemblerCommand.textContent = 'SHL';\r\n            if (!programStatus.noAnimation)\r\n                await sleepForIDLETIME();\r\n            await controlUnitAnimator.stepDescriptionUpdate('Hole den Operanden');\r\n            await transferAnimator.transfer('A', 'ALU1', mc8Components.A.value);\r\n            await registerAnimator.registerUpdate('ALU1', mc8Components.A.value);\r\n            await controlUnitAnimator.stepDescriptionUpdate('Schiebe Operanden nach links');\r\n            const result = mc8Components.ALU.shlBinary(mc8Components.A.value);\r\n            await aluAnimator.basicAnimation(result, false, false, 'A');\r\n        }\r\n        else if (mc8Components.CONTROL_UNIT.IR.value === 0b00111111) {\r\n            await arrowAnimator.displayIrArrow();\r\n            mc8Components.CONTROL_UNIT.assemblerCommand.textContent = 'SHR';\r\n            if (!programStatus.noAnimation)\r\n                await sleepForIDLETIME();\r\n            await controlUnitAnimator.stepDescriptionUpdate('Hole den Operanden');\r\n            await transferAnimator.transfer('A', 'ALU1', mc8Components.A.value);\r\n            await registerAnimator.registerUpdate('ALU1', mc8Components.A.value);\r\n            await controlUnitAnimator.stepDescriptionUpdate('Schiebe Operanden nach rechts');\r\n            const result = mc8Components.ALU.shrBinary(mc8Components.A.value);\r\n            await aluAnimator.basicAnimation(result, false, false, 'A');\r\n        }\r\n        else {\r\n            await addYellowBackgroundTo(mc8Components.CONTROL_UNIT.IR.htmlElement);\r\n            await arrowAnimator.displayIrArrow();\r\n            mc8Components.CONTROL_UNIT.assemblerCommand.textContent = 'Befehl Unbekannt';\r\n            throw Error('Unknown command');\r\n        }\r\n        pausingExecutionCheck();\r\n    }\r\n    async rcl() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole den Operanden');\r\n        await transferAnimator.transfer('A', 'ALU1', mc8Components.A.value);\r\n        await registerAnimator.registerUpdate('ALU1', mc8Components.A.value);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Rotiere Operand mit Carry-Flag nach links');\r\n        const result = mc8Components.ALU.rclBinary(mc8Components.A.value);\r\n        await aluAnimator.basicAnimation(result, false, true, 'A');\r\n        pausingExecutionCheck();\r\n    }\r\n    async rol() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole den Operanden');\r\n        await transferAnimator.transfer('A', 'ALU1', mc8Components.A.value);\r\n        await registerAnimator.registerUpdate('ALU1', mc8Components.A.value);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Rotiere Operand ohne Carry-Flag nach links');\r\n        const result = mc8Components.ALU.rolBinary(mc8Components.A.value);\r\n        await aluAnimator.basicAnimation(result, false, false, 'A');\r\n        pausingExecutionCheck();\r\n    }\r\n    async rcr() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole den Operanden');\r\n        await transferAnimator.transfer('A', 'ALU1', mc8Components.A.value);\r\n        await registerAnimator.registerUpdate('ALU1', mc8Components.A.value);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Rotiere Operand mit Carry-Flag nach rechts');\r\n        const result = mc8Components.ALU.rcrBinary(mc8Components.A.value);\r\n        await aluAnimator.basicAnimation(result, false, true, 'A');\r\n        pausingExecutionCheck();\r\n    }\r\n    async ror() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole den Operanden');\r\n        await transferAnimator.transfer('A', 'ALU1', mc8Components.A.value);\r\n        await registerAnimator.registerUpdate('ALU1', mc8Components.A.value);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Rotiere Operand ohne Carry-Flag nach rechts');\r\n        const result = mc8Components.ALU.rorBinary(mc8Components.A.value);\r\n        await aluAnimator.basicAnimation(result, false, false, 'A');\r\n        pausingExecutionCheck();\r\n    }\r\n    async cpA() {\r\n        await aluAnimator.loadOperands('A', 'A');\r\n        await controlUnitAnimator.stepDescriptionUpdate('Vergleiche die Operanden');\r\n        const result = mc8Components.ALU.addBinary(mc8Components.A.value, mc8Components.A.value, true);\r\n        await aluAnimator.basicAnimation(result, true, false, '');\r\n        pausingExecutionCheck();\r\n    }\r\n    async cpB() {\r\n        await aluAnimator.loadOperands('A', 'B');\r\n        await controlUnitAnimator.stepDescriptionUpdate('Vergleiche die Operanden');\r\n        const result = mc8Components.ALU.addBinary(mc8Components.A.value, mc8Components.B.value, true);\r\n        await aluAnimator.basicAnimation(result, true, false, '');\r\n        pausingExecutionCheck();\r\n    }\r\n    async cpC() {\r\n        await aluAnimator.loadOperands('A', 'C');\r\n        await controlUnitAnimator.stepDescriptionUpdate('Vergleiche die Operanden');\r\n        const result = mc8Components.ALU.addBinary(mc8Components.A.value, mc8Components.C.value, true);\r\n        await aluAnimator.basicAnimation(result, true, false, '');\r\n        pausingExecutionCheck();\r\n    }\r\n    async cpDat_8() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole den 1. Operanden');\r\n        await transferAnimator.transfer('A', 'ALU1', mc8Components.A.value);\r\n        await registerAnimator.registerUpdate('ALU1', mc8Components.A.value);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole den 2. Operanden');\r\n        await transferAnimator.readFromMemoryInRegister('PC', 'ALU2');\r\n        await registerAnimator.increasePcByOne();\r\n        await controlUnitAnimator.stepDescriptionUpdate('Vergleiche die Operanden');\r\n        const result = mc8Components.ALU.addBinary(mc8Components.A.value, mc8Components.ALU.operandRegister2.value, true);\r\n        await aluAnimator.basicAnimation(result, true, false, '');\r\n        pausingExecutionCheck();\r\n    }\r\n    async jpnzLabel() {\r\n        await animateLoadAddressBytesInZr();\r\n        await controlUnitAnimator.stepDescriptionUpdate('Prüfe die Sprungbedingung');\r\n        await arrowAnimator.displayJumpArrow('zFlag');\r\n        //jump\r\n        if (mc8Components.FLAGS.zFlag === 0) {\r\n            await controlUnitAnimator.stepDescriptionUpdate('Lade den Programmzähler');\r\n            await arrowAnimator.displayRegisterArrow('ZR');\r\n            await transferAnimator.transfer('ZR', 'PC', mc8Components.ZR.value);\r\n            await registerAnimator.registerUpdate('PC', mc8Components.ZR.value);\r\n        }\r\n        pausingExecutionCheck();\r\n    }\r\n    async jpzLabel() {\r\n        await animateLoadAddressBytesInZr();\r\n        await controlUnitAnimator.stepDescriptionUpdate('Prüfe die Sprungbedingung');\r\n        await arrowAnimator.displayJumpArrow('zFlag');\r\n        //jump\r\n        if (mc8Components.FLAGS.zFlag === 1) {\r\n            await controlUnitAnimator.stepDescriptionUpdate('Lade den Programmzähler');\r\n            await arrowAnimator.displayRegisterArrow('ZR');\r\n            await transferAnimator.transfer('ZR', 'PC', mc8Components.ZR.value);\r\n            await registerAnimator.registerUpdate('PC', mc8Components.ZR.value);\r\n        }\r\n        pausingExecutionCheck();\r\n    }\r\n    async jpncLabel() {\r\n        await animateLoadAddressBytesInZr();\r\n        await controlUnitAnimator.stepDescriptionUpdate('Prüfe die Sprungbedingung');\r\n        await arrowAnimator.displayJumpArrow('cFlag');\r\n        //jump\r\n        if (mc8Components.FLAGS.cFlag === 0) {\r\n            await controlUnitAnimator.stepDescriptionUpdate('Lade den Programmzähler');\r\n            await arrowAnimator.displayRegisterArrow('ZR');\r\n            await transferAnimator.transfer('ZR', 'PC', mc8Components.ZR.value);\r\n            await registerAnimator.registerUpdate('PC', mc8Components.ZR.value);\r\n        }\r\n        pausingExecutionCheck();\r\n    }\r\n    async jpcLabel() {\r\n        await animateLoadAddressBytesInZr();\r\n        await controlUnitAnimator.stepDescriptionUpdate('Prüfe die Sprungbedingung');\r\n        await arrowAnimator.displayJumpArrow('cFlag');\r\n        //jump\r\n        if (mc8Components.FLAGS.cFlag === 1) {\r\n            await controlUnitAnimator.stepDescriptionUpdate('Lade den Programmzähler');\r\n            await arrowAnimator.displayRegisterArrow('ZR');\r\n            await transferAnimator.transfer('ZR', 'PC', mc8Components.ZR.value);\r\n            await registerAnimator.registerUpdate('PC', mc8Components.ZR.value);\r\n        }\r\n        pausingExecutionCheck();\r\n    }\r\n    async jpnoLabel() {\r\n        await animateLoadAddressBytesInZr();\r\n        await controlUnitAnimator.stepDescriptionUpdate('Prüfe die Sprungbedingung');\r\n        await arrowAnimator.displayJumpArrow('pFlag');\r\n        //jump\r\n        if (mc8Components.FLAGS.pFlag === 0) {\r\n            await controlUnitAnimator.stepDescriptionUpdate('Lade den Programmzähler');\r\n            await arrowAnimator.displayRegisterArrow('ZR');\r\n            await transferAnimator.transfer('ZR', 'PC', mc8Components.ZR.value);\r\n            await registerAnimator.registerUpdate('PC', mc8Components.ZR.value);\r\n        }\r\n        pausingExecutionCheck();\r\n    }\r\n    async jpoLabel() {\r\n        await animateLoadAddressBytesInZr();\r\n        await controlUnitAnimator.stepDescriptionUpdate('Prüfe die Sprungbedingung');\r\n        await arrowAnimator.displayJumpArrow('pFlag');\r\n        //jump\r\n        if (mc8Components.FLAGS.pFlag === 1) {\r\n            await controlUnitAnimator.stepDescriptionUpdate('Lade den Programmzähler');\r\n            await arrowAnimator.displayRegisterArrow('ZR');\r\n            await transferAnimator.transfer('ZR', 'PC', mc8Components.ZR.value);\r\n            await registerAnimator.registerUpdate('PC', mc8Components.ZR.value);\r\n        }\r\n        pausingExecutionCheck();\r\n    }\r\n    async jpnsLabel() {\r\n        await animateLoadAddressBytesInZr();\r\n        await controlUnitAnimator.stepDescriptionUpdate('Prüfe die Sprungbedingung');\r\n        await arrowAnimator.displayJumpArrow('sFlag');\r\n        //jump\r\n        if (mc8Components.FLAGS.sFlag === 0) {\r\n            await controlUnitAnimator.stepDescriptionUpdate('Lade den Programmzähler');\r\n            await arrowAnimator.displayRegisterArrow('ZR');\r\n            await transferAnimator.transfer('ZR', 'PC', mc8Components.ZR.value);\r\n            await registerAnimator.registerUpdate('PC', mc8Components.ZR.value);\r\n        }\r\n        pausingExecutionCheck();\r\n    }\r\n    async jpsLabel() {\r\n        await animateLoadAddressBytesInZr();\r\n        await controlUnitAnimator.stepDescriptionUpdate('Prüfe die Sprungbedingung');\r\n        await arrowAnimator.displayJumpArrow('sFlag');\r\n        //jump\r\n        if (mc8Components.FLAGS.sFlag === 1) {\r\n            await controlUnitAnimator.stepDescriptionUpdate('Lade den Programmzähler');\r\n            await arrowAnimator.displayRegisterArrow('ZR');\r\n            await transferAnimator.transfer('ZR', 'PC', mc8Components.ZR.value);\r\n            await registerAnimator.registerUpdate('PC', mc8Components.ZR.value);\r\n        }\r\n        pausingExecutionCheck();\r\n    }\r\n    async jpLabel() {\r\n        await animateLoadAddressBytesInZr();\r\n        await controlUnitAnimator.stepDescriptionUpdate('Lade den Programmzähler');\r\n        await arrowAnimator.displayRegisterArrow('ZR');\r\n        await transferAnimator.transfer('ZR', 'PC', mc8Components.ZR.value);\r\n        await registerAnimator.registerUpdate('PC', mc8Components.ZR.value);\r\n        pausingExecutionCheck();\r\n    }\r\n    async callLabel() {\r\n        await animateLoadAddressBytesInZr();\r\n        await controlUnitAnimator.stepDescriptionUpdate('Erhöhe den Stackpointer um 1');\r\n        await arrowAnimator.displayRegisterArrow('SP');\r\n        await registerAnimator.registerUpdate('SP', mc8Components.SP.value - 1);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Schreibe das HI-Byte des PC');\r\n        await transferAnimator.writeToMemoryFromRegister('SP', 'PC_hi');\r\n        await controlUnitAnimator.stepDescriptionUpdate('Erhöhe den Stackpointer um 1');\r\n        await arrowAnimator.displayRegisterArrow('SP');\r\n        await registerAnimator.registerUpdate('SP', mc8Components.SP.value - 1);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Schreibe das LO-Byte des PC');\r\n        await transferAnimator.writeToMemoryFromRegister('SP', 'PC_lo');\r\n        await controlUnitAnimator.stepDescriptionUpdate('Lade den Programmzähler');\r\n        await arrowAnimator.displayRegisterArrow('ZR');\r\n        await transferAnimator.transfer('ZR', 'PC', mc8Components.ZR.value);\r\n        await registerAnimator.registerUpdate('PC', mc8Components.ZR.value);\r\n        pausingExecutionCheck();\r\n    }\r\n    async ret() {\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole das niederwertige Adressbyte');\r\n        await transferAnimator.readFromMemoryInRegister('SP', 'ZR_lo');\r\n        await controlUnitAnimator.stepDescriptionUpdate('Verringere den Stackpointer um 1');\r\n        await arrowAnimator.displayRegisterArrow('SP');\r\n        await registerAnimator.registerUpdate('SP', mc8Components.SP.value + 1);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Hole das höherwertige Adressbyte');\r\n        await transferAnimator.readFromMemoryInRegister('SP', 'ZR_hi');\r\n        await controlUnitAnimator.stepDescriptionUpdate('Verringere den Stackpointer um 1');\r\n        await arrowAnimator.displayRegisterArrow('SP');\r\n        await registerAnimator.registerUpdate('SP', mc8Components.SP.value + 1);\r\n        await controlUnitAnimator.stepDescriptionUpdate('Lade den Programmzähler');\r\n        await arrowAnimator.displayRegisterArrow('ZR');\r\n        await transferAnimator.transfer('ZR', 'PC', mc8Components.ZR.value);\r\n        await registerAnimator.registerUpdate('PC', mc8Components.ZR.value);\r\n        pausingExecutionCheck();\r\n    }\r\n}\r\nconst commandAnimator = new CommandAnimator();\r\n\n;// CONCATENATED MODULE: ./src/mc8Commands.ts\n\r\nclass mc8_command {\r\n    constructor(assemblerNotation, machineCommand, animationFunction) {\r\n        this.assemblerNotation = assemblerNotation;\r\n        this.machineCommand = machineCommand;\r\n        this.animationFunction = animationFunction;\r\n    }\r\n    async runAnimation() {\r\n        return this.animationFunction();\r\n    }\r\n}\r\nconst mc8Commands = [\r\n    new mc8_command('MOV A, dat_8', 0b00111110, commandAnimator.movAdat_8),\r\n    new mc8_command('MOV B, dat_8', 0b00000110, commandAnimator.movBdat_8),\r\n    new mc8_command('MOV C, dat_8', 0b00001110, commandAnimator.movCdat_8),\r\n    new mc8_command('2-Byte Befehl', 0b11011101, commandAnimator.twoByteIX),\r\n    new mc8_command('MOV HL, dat_16', 0b00100001, commandAnimator.movHLdat_16),\r\n    new mc8_command('MOV SP, dat_16', 0b00110001, commandAnimator.movSPdat_16),\r\n    new mc8_command('MOV A, B', 0b01111000, commandAnimator.movAB),\r\n    new mc8_command('MOV A, C', 0b01111001, commandAnimator.movAC),\r\n    new mc8_command('MOV B, A', 0b01000111, commandAnimator.movBA),\r\n    new mc8_command('MOV B, C', 0b01000001, commandAnimator.movBC),\r\n    new mc8_command('MOV C, A', 0b01001111, commandAnimator.movCA),\r\n    new mc8_command('MOV C, B', 0b01001000, commandAnimator.movCB),\r\n    new mc8_command('MOV A, label', 0b00111010, commandAnimator.movALabel),\r\n    new mc8_command('MOV label, A', 0b00110010, commandAnimator.movLabelA),\r\n    new mc8_command('MOV HL, label', 0b00101010, commandAnimator.movHlLabel),\r\n    new mc8_command('MOV label, HL', 0b00100010, commandAnimator.movLabelHl),\r\n    new mc8_command('MOV A, [HL]', 0b01111110, commandAnimator.movAHl),\r\n    new mc8_command('MOV [HL], A', 0b01110111, commandAnimator.movHlA),\r\n    new mc8_command('PUSH', 0b11110101, commandAnimator.push),\r\n    new mc8_command('POP', 0b11110001, commandAnimator.pop),\r\n    new mc8_command('IN A, port', 0b11011011, commandAnimator.inA),\r\n    new mc8_command('OUT port, A', 0b11010011, commandAnimator.outA),\r\n    new mc8_command('INC A', 0b00111100, commandAnimator.incA),\r\n    new mc8_command('INC B', 0b00000100, commandAnimator.incB),\r\n    new mc8_command('INC C', 0b00001100, commandAnimator.incC),\r\n    new mc8_command('INC HL', 0b00100011, commandAnimator.incHl),\r\n    new mc8_command('DEC A', 0b00111101, commandAnimator.decA),\r\n    new mc8_command('DEC B', 0b00000101, commandAnimator.decB),\r\n    new mc8_command('DEC C', 0b00001101, commandAnimator.decC),\r\n    new mc8_command('DEC HL', 0b00101011, commandAnimator.decHl),\r\n    new mc8_command('ADD A', 0b10000111, commandAnimator.addA),\r\n    new mc8_command('ADD B', 0b10000000, commandAnimator.addB),\r\n    new mc8_command('ADD C', 0b10000001, commandAnimator.addC),\r\n    new mc8_command('ADD dat_8', 0b11000110, commandAnimator.addDat_8),\r\n    new mc8_command('ADD HL, BC', 0b00001001, commandAnimator.addHlBc),\r\n    new mc8_command('SUB A', 0b10010111, commandAnimator.subA),\r\n    new mc8_command('SUB B', 0b10010000, commandAnimator.subB),\r\n    new mc8_command('SUB C', 0b10010001, commandAnimator.subC),\r\n    new mc8_command('SUB dat_8', 0b11010110, commandAnimator.subDat_8),\r\n    new mc8_command('AND A', 0b10100111, commandAnimator.andA),\r\n    new mc8_command('AND B', 0b10100000, commandAnimator.andB),\r\n    new mc8_command('AND C', 0b10100001, commandAnimator.andC),\r\n    new mc8_command('AND dat_8', 0b11100110, commandAnimator.andDat_8),\r\n    new mc8_command('OR A', 0b10110111, commandAnimator.orA),\r\n    new mc8_command('OR B', 0b10110000, commandAnimator.orB),\r\n    new mc8_command('OR C', 0b10110001, commandAnimator.orC),\r\n    new mc8_command('OR dat_8', 0b11110110, commandAnimator.orDat_8),\r\n    new mc8_command('XOR A', 0b10101111, commandAnimator.xorA),\r\n    new mc8_command('XOR B', 0b10101000, commandAnimator.xorB),\r\n    new mc8_command('XOR C', 0b10101001, commandAnimator.xorC),\r\n    new mc8_command('XOR dat_8', 0b11101110, commandAnimator.xorDat_8),\r\n    new mc8_command('2-Byte-Befehl', 0b11001011, commandAnimator.twoByteShift),\r\n    new mc8_command('RCL', 0b00010111, commandAnimator.rcl),\r\n    new mc8_command('ROL', 0b00000111, commandAnimator.rol),\r\n    new mc8_command('RCR', 0b00011111, commandAnimator.rcr),\r\n    new mc8_command('ROR', 0b00001111, commandAnimator.ror),\r\n    new mc8_command('CP A', 0b10111111, commandAnimator.cpA),\r\n    new mc8_command('CP B', 0b10111000, commandAnimator.cpB),\r\n    new mc8_command('CP C', 0b10111001, commandAnimator.cpC),\r\n    new mc8_command('CP dat_8', 0b11111110, commandAnimator.cpDat_8),\r\n    new mc8_command('JPNZ label', 0b11000010, commandAnimator.jpnzLabel),\r\n    new mc8_command('JPZ label', 0b11001010, commandAnimator.jpzLabel),\r\n    new mc8_command('JPNC label', 0b11010010, commandAnimator.jpncLabel),\r\n    new mc8_command('JPC label', 0b11011010, commandAnimator.jpcLabel),\r\n    new mc8_command('JPNO label', 0b11100010, commandAnimator.jpnoLabel),\r\n    new mc8_command('JPO label', 0b11101010, commandAnimator.jpoLabel),\r\n    new mc8_command('JPNS label', 0b11110010, commandAnimator.jpnsLabel),\r\n    new mc8_command('JPS label', 0b11111010, commandAnimator.jpsLabel),\r\n    new mc8_command('JP label', 0b11000011, commandAnimator.jpLabel),\r\n    new mc8_command('CALL label', 0b11001101, commandAnimator.callLabel),\r\n    new mc8_command('RET', 0b11001001, commandAnimator.ret),\r\n    new mc8_command('NOP', 0b00000000, commandAnimator.nop),\r\n    new mc8_command('HALT', 0b01110110, commandAnimator.halt),\r\n];\r\n\n;// CONCATENATED MODULE: ./src/index.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nwindow.addEventListener('DOMContentLoaded', function () {\r\n    resizeWindow(true);\r\n    utils_getHtmlElement('breakpointsCheckbox_input').checked = true;\r\n    utils_getHtmlElement('linkerFile_textarea').value = '';\r\n});\r\nwindow.addEventListener('resize', function () {\r\n    resizeWindow(false);\r\n});\r\nclass globalVars {\r\n}\r\nglobalVars.IDLE_TIME = 500;\r\nglobalVars.NO_ANIMATION_IDLE_TIME = 15;\r\nconst loadNextCommand = async () => {\r\n    mc8Components.CONTROL_UNIT.stepNumber.textContent = '0';\r\n    mc8Components.CONTROL_UNIT.assemblerCommand.textContent = '';\r\n    mc8Components.CONTROL_UNIT.IR.htmlElement.textContent = '';\r\n    await controlUnitAnimator.stepDescriptionUpdate('Hole den nächsten Befehl');\r\n    await transferAnimator.readFromMemoryInRegister('PC', 'IR');\r\n    await registerAnimator.increasePcByOne();\r\n    await controlUnitAnimator.stepDescriptionUpdate('Erkenne den Befehl');\r\n    await controlUnitAnimator.assemblerCommandUpdate();\r\n    pushNextCommand();\r\n};\r\nconst pushNextCommand = () => {\r\n    for (let i = 0; i < mc8Commands.length; i++) {\r\n        if (mc8Commands[i].machineCommand === mc8Components.CONTROL_UNIT.IR.value)\r\n            commandsToBeProcessed.push(mc8Commands[i].animationFunction);\r\n    }\r\n    commandsToBeProcessed.push(loadNextCommand);\r\n    return;\r\n};\r\nlet commandsToBeProcessed = [loadNextCommand];\r\nconst resetAnimation = () => {\r\n    commandsToBeProcessed = [loadNextCommand];\r\n    mc8Components.initComponents();\r\n    // movingObject_h2.classList.remove('displayGrid');\r\n};\r\nconst startAnimation = async () => {\r\n    let i = 0;\r\n    while (true) {\r\n        if (commandsToBeProcessed[i] === undefined) {\r\n            return false;\r\n        }\r\n        try {\r\n            await checkPlayPressed();\r\n            await commandsToBeProcessed[i]();\r\n        }\r\n        catch (e) {\r\n            if (!programStatus.reset) {\r\n                programStatus.setPause();\r\n            }\r\n            console.error(e);\r\n            return false;\r\n        }\r\n        i++;\r\n    }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///421\n")}},__webpack_require__={d:(Q,F)=>{for(var U in F)__webpack_require__.o(F,U)&&!__webpack_require__.o(Q,U)&&Object.defineProperty(Q,U,{enumerable:!0,get:F[U]})},o:(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F)},__webpack_exports__={};__webpack_modules__[421](0,__webpack_exports__,__webpack_require__)})();